//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.21006.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.41108.0
// 
namespace SLFileBrowser.FileSystemService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VirtualResourceInfo", Namespace="http://schemas.datacontract.org/2004/07/Vfs")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SLFileBrowser.FileSystemService.VirtualFolderInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SLFileBrowser.FileSystemService.VirtualFileInfo))]
    public partial class VirtualResourceInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string NameField;
        
        private string FullNameField;
        
        private string DescriptionField;
        
        private System.Nullable<System.DateTimeOffset> CreationTimeField;
        
        private System.Nullable<System.DateTimeOffset> LastWriteTimeField;
        
        private System.Nullable<System.DateTimeOffset> LastAccessTimeField;
        
        private bool IsReadOnlyField;
        
        private bool IsHiddenField;
        
        private string ParentFolderPathField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=1)]
        public string FullName {
            get {
                return this.FullNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FullNameField, value) != true)) {
                    this.FullNameField = value;
                    this.RaisePropertyChanged("FullName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=2)]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=3)]
        public System.Nullable<System.DateTimeOffset> CreationTime {
            get {
                return this.CreationTimeField;
            }
            set {
                if ((this.CreationTimeField.Equals(value) != true)) {
                    this.CreationTimeField = value;
                    this.RaisePropertyChanged("CreationTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=4)]
        public System.Nullable<System.DateTimeOffset> LastWriteTime {
            get {
                return this.LastWriteTimeField;
            }
            set {
                if ((this.LastWriteTimeField.Equals(value) != true)) {
                    this.LastWriteTimeField = value;
                    this.RaisePropertyChanged("LastWriteTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=5)]
        public System.Nullable<System.DateTimeOffset> LastAccessTime {
            get {
                return this.LastAccessTimeField;
            }
            set {
                if ((this.LastAccessTimeField.Equals(value) != true)) {
                    this.LastAccessTimeField = value;
                    this.RaisePropertyChanged("LastAccessTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=6)]
        public bool IsReadOnly {
            get {
                return this.IsReadOnlyField;
            }
            set {
                if ((this.IsReadOnlyField.Equals(value) != true)) {
                    this.IsReadOnlyField = value;
                    this.RaisePropertyChanged("IsReadOnly");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=7)]
        public bool IsHidden {
            get {
                return this.IsHiddenField;
            }
            set {
                if ((this.IsHiddenField.Equals(value) != true)) {
                    this.IsHiddenField = value;
                    this.RaisePropertyChanged("IsHidden");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=8)]
        public string ParentFolderPath {
            get {
                return this.ParentFolderPathField;
            }
            set {
                if ((object.ReferenceEquals(this.ParentFolderPathField, value) != true)) {
                    this.ParentFolderPathField = value;
                    this.RaisePropertyChanged("ParentFolderPath");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VirtualFolderInfo", Namespace="http://schemas.datacontract.org/2004/07/Vfs")]
    public partial class VirtualFolderInfo : SLFileBrowser.FileSystemService.VirtualResourceInfo {
        
        private bool IsEmptyField;
        
        private bool IsRootFolderField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsEmpty {
            get {
                return this.IsEmptyField;
            }
            set {
                if ((this.IsEmptyField.Equals(value) != true)) {
                    this.IsEmptyField = value;
                    this.RaisePropertyChanged("IsEmpty");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsRootFolder {
            get {
                return this.IsRootFolderField;
            }
            set {
                if ((this.IsRootFolderField.Equals(value) != true)) {
                    this.IsRootFolderField = value;
                    this.RaisePropertyChanged("IsRootFolder");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VirtualFileInfo", Namespace="http://schemas.datacontract.org/2004/07/Vfs")]
    public partial class VirtualFileInfo : SLFileBrowser.FileSystemService.VirtualResourceInfo {
        
        private string ContentTypeField;
        
        private long LengthField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ContentType {
            get {
                return this.ContentTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.ContentTypeField, value) != true)) {
                    this.ContentTypeField = value;
                    this.RaisePropertyChanged("ContentType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Length {
            get {
                return this.LengthField;
            }
            set {
                if ((this.LengthField.Equals(value) != true)) {
                    this.LengthField = value;
                    this.RaisePropertyChanged("Length");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ResourceFault", Namespace="http://schemas.datacontract.org/2004/07/Vfs.FileSystemService.Faults")]
    public partial class ResourceFault : object, System.ComponentModel.INotifyPropertyChanged {
        
        private SLFileBrowser.FileSystemService.FileSystemTask ContextField;
        
        private int EventIdField;
        
        private SLFileBrowser.FileSystemService.ResourceFaultType FaultTypeField;
        
        private string MessageField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SLFileBrowser.FileSystemService.FileSystemTask Context {
            get {
                return this.ContextField;
            }
            set {
                if ((this.ContextField.Equals(value) != true)) {
                    this.ContextField = value;
                    this.RaisePropertyChanged("Context");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EventId {
            get {
                return this.EventIdField;
            }
            set {
                if ((this.EventIdField.Equals(value) != true)) {
                    this.EventIdField = value;
                    this.RaisePropertyChanged("EventId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SLFileBrowser.FileSystemService.ResourceFaultType FaultType {
            get {
                return this.FaultTypeField;
            }
            set {
                if ((this.FaultTypeField.Equals(value) != true)) {
                    this.FaultTypeField = value;
                    this.RaisePropertyChanged("FaultType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.FlagsAttribute()]
    [System.Runtime.Serialization.DataContractAttribute(Name="FileSystemTask", Namespace="http://schemas.datacontract.org/2004/07/Vfs.Auditing")]
    public enum FileSystemTask : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Undefined = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unknown = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        All = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FileInfoRequest = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FolderInfoRequest = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RootFolderInfoRequest = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FolderContentsRequest = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ChildFilesRequest = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ChildFoldersRequest = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FileDownloadRequest = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FileUploadRequest = 10,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FileMoveRequest = 11,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FileCopyRequest = 12,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FileDeleteRequest = 13,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FolderMoveRequest = 14,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FolderCopyRequest = 15,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FolderDeleteRequest = 16,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FolderCreateRequest = 17,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FileParentRequest = 18,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FolderParentRequest = 19,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CheckFileAvailability = 20,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CheckFolderAvailability = 21,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CreateFolderPathRequest = 22,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CreateFilePathRequest = 23,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ResourceFaultType", Namespace="http://schemas.datacontract.org/2004/07/Vfs.FileSystemService.Faults")]
    public enum ResourceFaultType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Undefined = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ResourceAccess = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ResourceNotFound = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ResourceOverwrite = 3,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FolderContentsInfo", Namespace="http://schemas.datacontract.org/2004/07/Vfs")]
    public partial class FolderContentsInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Collections.ObjectModel.ObservableCollection<SLFileBrowser.FileSystemService.VirtualFileInfo> FilesField;
        
        private System.Collections.ObjectModel.ObservableCollection<SLFileBrowser.FileSystemService.VirtualFolderInfo> FoldersField;
        
        private string ParentFolderPathField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<SLFileBrowser.FileSystemService.VirtualFileInfo> Files {
            get {
                return this.FilesField;
            }
            set {
                if ((object.ReferenceEquals(this.FilesField, value) != true)) {
                    this.FilesField = value;
                    this.RaisePropertyChanged("Files");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<SLFileBrowser.FileSystemService.VirtualFolderInfo> Folders {
            get {
                return this.FoldersField;
            }
            set {
                if ((object.ReferenceEquals(this.FoldersField, value) != true)) {
                    this.FoldersField = value;
                    this.RaisePropertyChanged("Folders");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ParentFolderPath {
            get {
                return this.ParentFolderPathField;
            }
            set {
                if ((object.ReferenceEquals(this.ParentFolderPathField, value) != true)) {
                    this.ParentFolderPathField = value;
                    this.RaisePropertyChanged("ParentFolderPath");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://vfs.hardcodet.net/ws/", ConfigurationName="FileSystemService.IFSOperationService")]
    public interface IFSOperationService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://vfs.hardcodet.net/ws/IFSOperationService/MoveFile", ReplyAction="http://vfs.hardcodet.net/ws/IFSOperationService/MoveFileResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SLFileBrowser.FileSystemService.ResourceFault), Action="http://vfs.hardcodet.net/ws/IFSOperationService/MoveFileResourceFaultFault", Name="ResourceFault", Namespace="http://schemas.datacontract.org/2004/07/Vfs.FileSystemService.Faults")]
        System.IAsyncResult BeginMoveFile(SLFileBrowser.FileSystemService.MoveFileRequest request, System.AsyncCallback callback, object asyncState);
        
        SLFileBrowser.FileSystemService.MoveFileResponse EndMoveFile(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://vfs.hardcodet.net/ws/IFSOperationService/MoveFileItem", ReplyAction="http://vfs.hardcodet.net/ws/IFSOperationService/MoveFileItemResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SLFileBrowser.FileSystemService.ResourceFault), Action="http://vfs.hardcodet.net/ws/IFSOperationService/MoveFileItemResourceFaultFault", Name="ResourceFault", Namespace="http://schemas.datacontract.org/2004/07/Vfs.FileSystemService.Faults")]
        System.IAsyncResult BeginMoveFileItem(SLFileBrowser.FileSystemService.MoveFileItemRequest request, System.AsyncCallback callback, object asyncState);
        
        SLFileBrowser.FileSystemService.MoveFileItemResponse EndMoveFileItem(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://vfs.hardcodet.net/ws/IFSOperationService/CopyFolder", ReplyAction="http://vfs.hardcodet.net/ws/IFSOperationService/CopyFolderResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SLFileBrowser.FileSystemService.ResourceFault), Action="http://vfs.hardcodet.net/ws/IFSOperationService/CopyFolderResourceFaultFault", Name="ResourceFault", Namespace="http://schemas.datacontract.org/2004/07/Vfs.FileSystemService.Faults")]
        System.IAsyncResult BeginCopyFolder(SLFileBrowser.FileSystemService.CopyFolderRequest request, System.AsyncCallback callback, object asyncState);
        
        SLFileBrowser.FileSystemService.CopyFolderResponse EndCopyFolder(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://vfs.hardcodet.net/ws/IFSOperationService/CopyFolderItem", ReplyAction="http://vfs.hardcodet.net/ws/IFSOperationService/CopyFolderItemResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SLFileBrowser.FileSystemService.ResourceFault), Action="http://vfs.hardcodet.net/ws/IFSOperationService/CopyFolderItemResourceFaultFault", Name="ResourceFault", Namespace="http://schemas.datacontract.org/2004/07/Vfs.FileSystemService.Faults")]
        System.IAsyncResult BeginCopyFolderItem(SLFileBrowser.FileSystemService.CopyFolderItemRequest request, System.AsyncCallback callback, object asyncState);
        
        SLFileBrowser.FileSystemService.CopyFolderItemResponse EndCopyFolderItem(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://vfs.hardcodet.net/ws/IFSOperationService/CopyFile", ReplyAction="http://vfs.hardcodet.net/ws/IFSOperationService/CopyFileResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SLFileBrowser.FileSystemService.ResourceFault), Action="http://vfs.hardcodet.net/ws/IFSOperationService/CopyFileResourceFaultFault", Name="ResourceFault", Namespace="http://schemas.datacontract.org/2004/07/Vfs.FileSystemService.Faults")]
        System.IAsyncResult BeginCopyFile(SLFileBrowser.FileSystemService.CopyFileRequest request, System.AsyncCallback callback, object asyncState);
        
        SLFileBrowser.FileSystemService.CopyFileResponse EndCopyFile(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://vfs.hardcodet.net/ws/IFSOperationService/CopyFileItem", ReplyAction="http://vfs.hardcodet.net/ws/IFSOperationService/CopyFileItemResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SLFileBrowser.FileSystemService.ResourceFault), Action="http://vfs.hardcodet.net/ws/IFSOperationService/CopyFileItemResourceFaultFault", Name="ResourceFault", Namespace="http://schemas.datacontract.org/2004/07/Vfs.FileSystemService.Faults")]
        System.IAsyncResult BeginCopyFileItem(SLFileBrowser.FileSystemService.CopyFileItemRequest request, System.AsyncCallback callback, object asyncState);
        
        SLFileBrowser.FileSystemService.CopyFileItemResponse EndCopyFileItem(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://vfs.hardcodet.net/ws/IFSOperationService/CreateFilePath", ReplyAction="http://vfs.hardcodet.net/ws/IFSOperationService/CreateFilePathResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SLFileBrowser.FileSystemService.ResourceFault), Action="http://vfs.hardcodet.net/ws/IFSOperationService/CreateFilePathResourceFaultFault", Name="ResourceFault", Namespace="http://schemas.datacontract.org/2004/07/Vfs.FileSystemService.Faults")]
        System.IAsyncResult BeginCreateFilePath(SLFileBrowser.FileSystemService.CreateFilePathRequest request, System.AsyncCallback callback, object asyncState);
        
        SLFileBrowser.FileSystemService.CreateFilePathResponse EndCreateFilePath(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://vfs.hardcodet.net/ws/IFSOperationService/CreateFolderPath", ReplyAction="http://vfs.hardcodet.net/ws/IFSOperationService/CreateFolderPathResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SLFileBrowser.FileSystemService.ResourceFault), Action="http://vfs.hardcodet.net/ws/IFSOperationService/CreateFolderPathResourceFaultFaul" +
            "t", Name="ResourceFault", Namespace="http://schemas.datacontract.org/2004/07/Vfs.FileSystemService.Faults")]
        System.IAsyncResult BeginCreateFolderPath(SLFileBrowser.FileSystemService.CreateFolderPathRequest request, System.AsyncCallback callback, object asyncState);
        
        SLFileBrowser.FileSystemService.CreateFolderPathResponse EndCreateFolderPath(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://vfs.hardcodet.net/ws/IFSOperationService/GetFileSystemRoot", ReplyAction="http://vfs.hardcodet.net/ws/IFSOperationService/GetFileSystemRootResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SLFileBrowser.FileSystemService.ResourceFault), Action="http://vfs.hardcodet.net/ws/IFSOperationService/GetFileSystemRootResourceFaultFau" +
            "lt", Name="ResourceFault", Namespace="http://schemas.datacontract.org/2004/07/Vfs.FileSystemService.Faults")]
        System.IAsyncResult BeginGetFileSystemRoot(SLFileBrowser.FileSystemService.GetFileSystemRootRequest request, System.AsyncCallback callback, object asyncState);
        
        SLFileBrowser.FileSystemService.GetFileSystemRootResponse EndGetFileSystemRoot(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://vfs.hardcodet.net/ws/IFSOperationService/GetFileInfo", ReplyAction="http://vfs.hardcodet.net/ws/IFSOperationService/GetFileInfoResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SLFileBrowser.FileSystemService.ResourceFault), Action="http://vfs.hardcodet.net/ws/IFSOperationService/GetFileInfoResourceFaultFault", Name="ResourceFault", Namespace="http://schemas.datacontract.org/2004/07/Vfs.FileSystemService.Faults")]
        System.IAsyncResult BeginGetFileInfo(SLFileBrowser.FileSystemService.GetFileInfoRequest request, System.AsyncCallback callback, object asyncState);
        
        SLFileBrowser.FileSystemService.GetFileInfoResponse EndGetFileInfo(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://vfs.hardcodet.net/ws/IFSOperationService/GetFolderInfo", ReplyAction="http://vfs.hardcodet.net/ws/IFSOperationService/GetFolderInfoResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SLFileBrowser.FileSystemService.ResourceFault), Action="http://vfs.hardcodet.net/ws/IFSOperationService/GetFolderInfoResourceFaultFault", Name="ResourceFault", Namespace="http://schemas.datacontract.org/2004/07/Vfs.FileSystemService.Faults")]
        System.IAsyncResult BeginGetFolderInfo(SLFileBrowser.FileSystemService.GetFolderInfoRequest request, System.AsyncCallback callback, object asyncState);
        
        SLFileBrowser.FileSystemService.GetFolderInfoResponse EndGetFolderInfo(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://vfs.hardcodet.net/ws/IFSOperationService/GetFileParent", ReplyAction="http://vfs.hardcodet.net/ws/IFSOperationService/GetFileParentResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SLFileBrowser.FileSystemService.ResourceFault), Action="http://vfs.hardcodet.net/ws/IFSOperationService/GetFileParentResourceFaultFault", Name="ResourceFault", Namespace="http://schemas.datacontract.org/2004/07/Vfs.FileSystemService.Faults")]
        System.IAsyncResult BeginGetFileParent(SLFileBrowser.FileSystemService.GetFileParentRequest request, System.AsyncCallback callback, object asyncState);
        
        SLFileBrowser.FileSystemService.GetFileParentResponse EndGetFileParent(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://vfs.hardcodet.net/ws/IFSOperationService/GetFileParentByItem", ReplyAction="http://vfs.hardcodet.net/ws/IFSOperationService/GetFileParentByItemResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SLFileBrowser.FileSystemService.ResourceFault), Action="http://vfs.hardcodet.net/ws/IFSOperationService/GetFileParentByItemResourceFaultF" +
            "ault", Name="ResourceFault", Namespace="http://schemas.datacontract.org/2004/07/Vfs.FileSystemService.Faults")]
        System.IAsyncResult BeginGetFileParentByItem(SLFileBrowser.FileSystemService.GetFileParentByItemRequest request, System.AsyncCallback callback, object asyncState);
        
        SLFileBrowser.FileSystemService.GetFileParentByItemResponse EndGetFileParentByItem(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://vfs.hardcodet.net/ws/IFSOperationService/GetFolderParent", ReplyAction="http://vfs.hardcodet.net/ws/IFSOperationService/GetFolderParentResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SLFileBrowser.FileSystemService.ResourceFault), Action="http://vfs.hardcodet.net/ws/IFSOperationService/GetFolderParentResourceFaultFault" +
            "", Name="ResourceFault", Namespace="http://schemas.datacontract.org/2004/07/Vfs.FileSystemService.Faults")]
        System.IAsyncResult BeginGetFolderParent(SLFileBrowser.FileSystemService.GetFolderParentRequest request, System.AsyncCallback callback, object asyncState);
        
        SLFileBrowser.FileSystemService.GetFolderParentResponse EndGetFolderParent(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://vfs.hardcodet.net/ws/IFSOperationService/GetFolderParentByItem", ReplyAction="http://vfs.hardcodet.net/ws/IFSOperationService/GetFolderParentByItemResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SLFileBrowser.FileSystemService.ResourceFault), Action="http://vfs.hardcodet.net/ws/IFSOperationService/GetFolderParentByItemResourceFaul" +
            "tFault", Name="ResourceFault", Namespace="http://schemas.datacontract.org/2004/07/Vfs.FileSystemService.Faults")]
        System.IAsyncResult BeginGetFolderParentByItem(SLFileBrowser.FileSystemService.GetFolderParentByItemRequest request, System.AsyncCallback callback, object asyncState);
        
        SLFileBrowser.FileSystemService.GetFolderParentByItemResponse EndGetFolderParentByItem(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://vfs.hardcodet.net/ws/IFSOperationService/GetChildFolders", ReplyAction="http://vfs.hardcodet.net/ws/IFSOperationService/GetChildFoldersResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SLFileBrowser.FileSystemService.ResourceFault), Action="http://vfs.hardcodet.net/ws/IFSOperationService/GetChildFoldersResourceFaultFault" +
            "", Name="ResourceFault", Namespace="http://schemas.datacontract.org/2004/07/Vfs.FileSystemService.Faults")]
        System.IAsyncResult BeginGetChildFolders(SLFileBrowser.FileSystemService.GetChildFoldersRequest request, System.AsyncCallback callback, object asyncState);
        
        SLFileBrowser.FileSystemService.GetChildFoldersResponse EndGetChildFolders(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://vfs.hardcodet.net/ws/IFSOperationService/GetChildFoldersByItem", ReplyAction="http://vfs.hardcodet.net/ws/IFSOperationService/GetChildFoldersByItemResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SLFileBrowser.FileSystemService.ResourceFault), Action="http://vfs.hardcodet.net/ws/IFSOperationService/GetChildFoldersByItemResourceFaul" +
            "tFault", Name="ResourceFault", Namespace="http://schemas.datacontract.org/2004/07/Vfs.FileSystemService.Faults")]
        System.IAsyncResult BeginGetChildFoldersByItem(SLFileBrowser.FileSystemService.GetChildFoldersByItemRequest request, System.AsyncCallback callback, object asyncState);
        
        SLFileBrowser.FileSystemService.GetChildFoldersByItemResponse EndGetChildFoldersByItem(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://vfs.hardcodet.net/ws/IFSOperationService/GetFilteredChildFolders", ReplyAction="http://vfs.hardcodet.net/ws/IFSOperationService/GetFilteredChildFoldersResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SLFileBrowser.FileSystemService.ResourceFault), Action="http://vfs.hardcodet.net/ws/IFSOperationService/GetFilteredChildFoldersResourceFa" +
            "ultFault", Name="ResourceFault", Namespace="http://schemas.datacontract.org/2004/07/Vfs.FileSystemService.Faults")]
        System.IAsyncResult BeginGetFilteredChildFolders(SLFileBrowser.FileSystemService.GetFilteredChildFoldersRequest request, System.AsyncCallback callback, object asyncState);
        
        SLFileBrowser.FileSystemService.GetFilteredChildFoldersResponse EndGetFilteredChildFolders(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://vfs.hardcodet.net/ws/IFSOperationService/GetFilteredChildFoldersByItem", ReplyAction="http://vfs.hardcodet.net/ws/IFSOperationService/GetFilteredChildFoldersByItemResp" +
            "onse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SLFileBrowser.FileSystemService.ResourceFault), Action="http://vfs.hardcodet.net/ws/IFSOperationService/GetFilteredChildFoldersByItemReso" +
            "urceFaultFault", Name="ResourceFault", Namespace="http://schemas.datacontract.org/2004/07/Vfs.FileSystemService.Faults")]
        System.IAsyncResult BeginGetFilteredChildFoldersByItem(SLFileBrowser.FileSystemService.GetFilteredChildFoldersByItemRequest request, System.AsyncCallback callback, object asyncState);
        
        SLFileBrowser.FileSystemService.GetFilteredChildFoldersByItemResponse EndGetFilteredChildFoldersByItem(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://vfs.hardcodet.net/ws/IFSOperationService/GetChildFiles", ReplyAction="http://vfs.hardcodet.net/ws/IFSOperationService/GetChildFilesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SLFileBrowser.FileSystemService.ResourceFault), Action="http://vfs.hardcodet.net/ws/IFSOperationService/GetChildFilesResourceFaultFault", Name="ResourceFault", Namespace="http://schemas.datacontract.org/2004/07/Vfs.FileSystemService.Faults")]
        System.IAsyncResult BeginGetChildFiles(SLFileBrowser.FileSystemService.GetChildFilesRequest request, System.AsyncCallback callback, object asyncState);
        
        SLFileBrowser.FileSystemService.GetChildFilesResponse EndGetChildFiles(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://vfs.hardcodet.net/ws/IFSOperationService/GetChildFilesByItem", ReplyAction="http://vfs.hardcodet.net/ws/IFSOperationService/GetChildFilesByItemResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SLFileBrowser.FileSystemService.ResourceFault), Action="http://vfs.hardcodet.net/ws/IFSOperationService/GetChildFilesByItemResourceFaultF" +
            "ault", Name="ResourceFault", Namespace="http://schemas.datacontract.org/2004/07/Vfs.FileSystemService.Faults")]
        System.IAsyncResult BeginGetChildFilesByItem(SLFileBrowser.FileSystemService.GetChildFilesByItemRequest request, System.AsyncCallback callback, object asyncState);
        
        SLFileBrowser.FileSystemService.GetChildFilesByItemResponse EndGetChildFilesByItem(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://vfs.hardcodet.net/ws/IFSOperationService/GetFilteredChildFiles", ReplyAction="http://vfs.hardcodet.net/ws/IFSOperationService/GetFilteredChildFilesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SLFileBrowser.FileSystemService.ResourceFault), Action="http://vfs.hardcodet.net/ws/IFSOperationService/GetFilteredChildFilesResourceFaul" +
            "tFault", Name="ResourceFault", Namespace="http://schemas.datacontract.org/2004/07/Vfs.FileSystemService.Faults")]
        System.IAsyncResult BeginGetFilteredChildFiles(SLFileBrowser.FileSystemService.GetFilteredChildFilesRequest request, System.AsyncCallback callback, object asyncState);
        
        SLFileBrowser.FileSystemService.GetFilteredChildFilesResponse EndGetFilteredChildFiles(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://vfs.hardcodet.net/ws/IFSOperationService/GetFilteredChildFilesByItem", ReplyAction="http://vfs.hardcodet.net/ws/IFSOperationService/GetFilteredChildFilesByItemRespon" +
            "se")]
        [System.ServiceModel.FaultContractAttribute(typeof(SLFileBrowser.FileSystemService.ResourceFault), Action="http://vfs.hardcodet.net/ws/IFSOperationService/GetFilteredChildFilesByItemResour" +
            "ceFaultFault", Name="ResourceFault", Namespace="http://schemas.datacontract.org/2004/07/Vfs.FileSystemService.Faults")]
        System.IAsyncResult BeginGetFilteredChildFilesByItem(SLFileBrowser.FileSystemService.GetFilteredChildFilesByItemRequest request, System.AsyncCallback callback, object asyncState);
        
        SLFileBrowser.FileSystemService.GetFilteredChildFilesByItemResponse EndGetFilteredChildFilesByItem(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://vfs.hardcodet.net/ws/IFSOperationService/GetFolderContents", ReplyAction="http://vfs.hardcodet.net/ws/IFSOperationService/GetFolderContentsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SLFileBrowser.FileSystemService.ResourceFault), Action="http://vfs.hardcodet.net/ws/IFSOperationService/GetFolderContentsResourceFaultFau" +
            "lt", Name="ResourceFault", Namespace="http://schemas.datacontract.org/2004/07/Vfs.FileSystemService.Faults")]
        System.IAsyncResult BeginGetFolderContents(SLFileBrowser.FileSystemService.GetFolderContentsRequest request, System.AsyncCallback callback, object asyncState);
        
        SLFileBrowser.FileSystemService.GetFolderContentsResponse EndGetFolderContents(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://vfs.hardcodet.net/ws/IFSOperationService/GetFolderContentsByItem", ReplyAction="http://vfs.hardcodet.net/ws/IFSOperationService/GetFolderContentsByItemResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SLFileBrowser.FileSystemService.ResourceFault), Action="http://vfs.hardcodet.net/ws/IFSOperationService/GetFolderContentsByItemResourceFa" +
            "ultFault", Name="ResourceFault", Namespace="http://schemas.datacontract.org/2004/07/Vfs.FileSystemService.Faults")]
        System.IAsyncResult BeginGetFolderContentsByItem(SLFileBrowser.FileSystemService.GetFolderContentsByItemRequest request, System.AsyncCallback callback, object asyncState);
        
        SLFileBrowser.FileSystemService.GetFolderContentsByItemResponse EndGetFolderContentsByItem(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://vfs.hardcodet.net/ws/IFSOperationService/GetFilteredFolderContents", ReplyAction="http://vfs.hardcodet.net/ws/IFSOperationService/GetFilteredFolderContentsResponse" +
            "")]
        [System.ServiceModel.FaultContractAttribute(typeof(SLFileBrowser.FileSystemService.ResourceFault), Action="http://vfs.hardcodet.net/ws/IFSOperationService/GetFilteredFolderContentsResource" +
            "FaultFault", Name="ResourceFault", Namespace="http://schemas.datacontract.org/2004/07/Vfs.FileSystemService.Faults")]
        System.IAsyncResult BeginGetFilteredFolderContents(SLFileBrowser.FileSystemService.GetFilteredFolderContentsRequest request, System.AsyncCallback callback, object asyncState);
        
        SLFileBrowser.FileSystemService.GetFilteredFolderContentsResponse EndGetFilteredFolderContents(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://vfs.hardcodet.net/ws/IFSOperationService/GetFilteredFolderContentsByItem", ReplyAction="http://vfs.hardcodet.net/ws/IFSOperationService/GetFilteredFolderContentsByItemRe" +
            "sponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SLFileBrowser.FileSystemService.ResourceFault), Action="http://vfs.hardcodet.net/ws/IFSOperationService/GetFilteredFolderContentsByItemRe" +
            "sourceFaultFault", Name="ResourceFault", Namespace="http://schemas.datacontract.org/2004/07/Vfs.FileSystemService.Faults")]
        System.IAsyncResult BeginGetFilteredFolderContentsByItem(SLFileBrowser.FileSystemService.GetFilteredFolderContentsByItemRequest request, System.AsyncCallback callback, object asyncState);
        
        SLFileBrowser.FileSystemService.GetFilteredFolderContentsByItemResponse EndGetFilteredFolderContentsByItem(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://vfs.hardcodet.net/ws/IFSOperationService/IsFileAvailable", ReplyAction="http://vfs.hardcodet.net/ws/IFSOperationService/IsFileAvailableResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SLFileBrowser.FileSystemService.ResourceFault), Action="http://vfs.hardcodet.net/ws/IFSOperationService/IsFileAvailableResourceFaultFault" +
            "", Name="ResourceFault", Namespace="http://schemas.datacontract.org/2004/07/Vfs.FileSystemService.Faults")]
        System.IAsyncResult BeginIsFileAvailable(SLFileBrowser.FileSystemService.IsFileAvailableRequest request, System.AsyncCallback callback, object asyncState);
        
        SLFileBrowser.FileSystemService.IsFileAvailableResponse EndIsFileAvailable(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://vfs.hardcodet.net/ws/IFSOperationService/IsFolderAvailable", ReplyAction="http://vfs.hardcodet.net/ws/IFSOperationService/IsFolderAvailableResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SLFileBrowser.FileSystemService.ResourceFault), Action="http://vfs.hardcodet.net/ws/IFSOperationService/IsFolderAvailableResourceFaultFau" +
            "lt", Name="ResourceFault", Namespace="http://schemas.datacontract.org/2004/07/Vfs.FileSystemService.Faults")]
        System.IAsyncResult BeginIsFolderAvailable(SLFileBrowser.FileSystemService.IsFolderAvailableRequest request, System.AsyncCallback callback, object asyncState);
        
        SLFileBrowser.FileSystemService.IsFolderAvailableResponse EndIsFolderAvailable(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://vfs.hardcodet.net/ws/IFSOperationService/CreateFolderUnderParent", ReplyAction="http://vfs.hardcodet.net/ws/IFSOperationService/CreateFolderUnderParentResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SLFileBrowser.FileSystemService.ResourceFault), Action="http://vfs.hardcodet.net/ws/IFSOperationService/CreateFolderUnderParentResourceFa" +
            "ultFault", Name="ResourceFault", Namespace="http://schemas.datacontract.org/2004/07/Vfs.FileSystemService.Faults")]
        System.IAsyncResult BeginCreateFolderUnderParent(SLFileBrowser.FileSystemService.CreateFolderUnderParentRequest request, System.AsyncCallback callback, object asyncState);
        
        SLFileBrowser.FileSystemService.CreateFolderUnderParentResponse EndCreateFolderUnderParent(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://vfs.hardcodet.net/ws/IFSOperationService/CreateFolder", ReplyAction="http://vfs.hardcodet.net/ws/IFSOperationService/CreateFolderResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SLFileBrowser.FileSystemService.ResourceFault), Action="http://vfs.hardcodet.net/ws/IFSOperationService/CreateFolderResourceFaultFault", Name="ResourceFault", Namespace="http://schemas.datacontract.org/2004/07/Vfs.FileSystemService.Faults")]
        System.IAsyncResult BeginCreateFolder(SLFileBrowser.FileSystemService.CreateFolderRequest request, System.AsyncCallback callback, object asyncState);
        
        SLFileBrowser.FileSystemService.CreateFolderResponse EndCreateFolder(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://vfs.hardcodet.net/ws/IFSOperationService/CreateFolderUnderParentItem", ReplyAction="http://vfs.hardcodet.net/ws/IFSOperationService/CreateFolderUnderParentItemRespon" +
            "se")]
        [System.ServiceModel.FaultContractAttribute(typeof(SLFileBrowser.FileSystemService.ResourceFault), Action="http://vfs.hardcodet.net/ws/IFSOperationService/CreateFolderUnderParentItemResour" +
            "ceFaultFault", Name="ResourceFault", Namespace="http://schemas.datacontract.org/2004/07/Vfs.FileSystemService.Faults")]
        System.IAsyncResult BeginCreateFolderUnderParentItem(SLFileBrowser.FileSystemService.CreateFolderUnderParentItemRequest request, System.AsyncCallback callback, object asyncState);
        
        SLFileBrowser.FileSystemService.CreateFolderUnderParentItemResponse EndCreateFolderUnderParentItem(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://vfs.hardcodet.net/ws/IFSOperationService/DeleteFolder", ReplyAction="http://vfs.hardcodet.net/ws/IFSOperationService/DeleteFolderResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SLFileBrowser.FileSystemService.ResourceFault), Action="http://vfs.hardcodet.net/ws/IFSOperationService/DeleteFolderResourceFaultFault", Name="ResourceFault", Namespace="http://schemas.datacontract.org/2004/07/Vfs.FileSystemService.Faults")]
        System.IAsyncResult BeginDeleteFolder(SLFileBrowser.FileSystemService.DeleteFolderRequest request, System.AsyncCallback callback, object asyncState);
        
        SLFileBrowser.FileSystemService.DeleteFolderResponse EndDeleteFolder(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://vfs.hardcodet.net/ws/IFSOperationService/DeleteFile", ReplyAction="http://vfs.hardcodet.net/ws/IFSOperationService/DeleteFileResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SLFileBrowser.FileSystemService.ResourceFault), Action="http://vfs.hardcodet.net/ws/IFSOperationService/DeleteFileResourceFaultFault", Name="ResourceFault", Namespace="http://schemas.datacontract.org/2004/07/Vfs.FileSystemService.Faults")]
        System.IAsyncResult BeginDeleteFile(SLFileBrowser.FileSystemService.DeleteFileRequest request, System.AsyncCallback callback, object asyncState);
        
        SLFileBrowser.FileSystemService.DeleteFileResponse EndDeleteFile(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://vfs.hardcodet.net/ws/IFSOperationService/MoveFolder", ReplyAction="http://vfs.hardcodet.net/ws/IFSOperationService/MoveFolderResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SLFileBrowser.FileSystemService.ResourceFault), Action="http://vfs.hardcodet.net/ws/IFSOperationService/MoveFolderResourceFaultFault", Name="ResourceFault", Namespace="http://schemas.datacontract.org/2004/07/Vfs.FileSystemService.Faults")]
        System.IAsyncResult BeginMoveFolder(SLFileBrowser.FileSystemService.MoveFolderRequest request, System.AsyncCallback callback, object asyncState);
        
        SLFileBrowser.FileSystemService.MoveFolderResponse EndMoveFolder(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://vfs.hardcodet.net/ws/IFSOperationService/MoveFolderItem", ReplyAction="http://vfs.hardcodet.net/ws/IFSOperationService/MoveFolderItemResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SLFileBrowser.FileSystemService.ResourceFault), Action="http://vfs.hardcodet.net/ws/IFSOperationService/MoveFolderItemResourceFaultFault", Name="ResourceFault", Namespace="http://schemas.datacontract.org/2004/07/Vfs.FileSystemService.Faults")]
        System.IAsyncResult BeginMoveFolderItem(SLFileBrowser.FileSystemService.MoveFolderItemRequest request, System.AsyncCallback callback, object asyncState);
        
        SLFileBrowser.FileSystemService.MoveFolderItemResponse EndMoveFolderItem(System.IAsyncResult result);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="MoveFile", WrapperNamespace="http://vfs.hardcodet.net/ws/", IsWrapped=true)]
    public partial class MoveFileRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://vfs.hardcodet.net/ws/", Order=0)]
        public string virtualFilePath;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://vfs.hardcodet.net/ws/", Order=1)]
        public string destinationPath;
        
        public MoveFileRequest() {
        }
        
        public MoveFileRequest(string virtualFilePath, string destinationPath) {
            this.virtualFilePath = virtualFilePath;
            this.destinationPath = destinationPath;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="MoveFileResponse", WrapperNamespace="http://vfs.hardcodet.net/ws/", IsWrapped=true)]
    public partial class MoveFileResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://vfs.hardcodet.net/ws/", Order=0)]
        public SLFileBrowser.FileSystemService.VirtualFileInfo MoveFileResult;
        
        public MoveFileResponse() {
        }
        
        public MoveFileResponse(SLFileBrowser.FileSystemService.VirtualFileInfo MoveFileResult) {
            this.MoveFileResult = MoveFileResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="MoveFileItem", WrapperNamespace="http://vfs.hardcodet.net/ws/", IsWrapped=true)]
    public partial class MoveFileItemRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://vfs.hardcodet.net/ws/", Order=0)]
        public SLFileBrowser.FileSystemService.VirtualFileInfo file;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://vfs.hardcodet.net/ws/", Order=1)]
        public string destinationPath;
        
        public MoveFileItemRequest() {
        }
        
        public MoveFileItemRequest(SLFileBrowser.FileSystemService.VirtualFileInfo file, string destinationPath) {
            this.file = file;
            this.destinationPath = destinationPath;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="MoveFileItemResponse", WrapperNamespace="http://vfs.hardcodet.net/ws/", IsWrapped=true)]
    public partial class MoveFileItemResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://vfs.hardcodet.net/ws/", Order=0)]
        public SLFileBrowser.FileSystemService.VirtualFileInfo MoveFileItemResult;
        
        public MoveFileItemResponse() {
        }
        
        public MoveFileItemResponse(SLFileBrowser.FileSystemService.VirtualFileInfo MoveFileItemResult) {
            this.MoveFileItemResult = MoveFileItemResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CopyFolder", WrapperNamespace="http://vfs.hardcodet.net/ws/", IsWrapped=true)]
    public partial class CopyFolderRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://vfs.hardcodet.net/ws/", Order=0)]
        public string virtualFolderPath;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://vfs.hardcodet.net/ws/", Order=1)]
        public string destinationPath;
        
        public CopyFolderRequest() {
        }
        
        public CopyFolderRequest(string virtualFolderPath, string destinationPath) {
            this.virtualFolderPath = virtualFolderPath;
            this.destinationPath = destinationPath;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CopyFolderResponse", WrapperNamespace="http://vfs.hardcodet.net/ws/", IsWrapped=true)]
    public partial class CopyFolderResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://vfs.hardcodet.net/ws/", Order=0)]
        public SLFileBrowser.FileSystemService.VirtualFolderInfo CopyFolderResult;
        
        public CopyFolderResponse() {
        }
        
        public CopyFolderResponse(SLFileBrowser.FileSystemService.VirtualFolderInfo CopyFolderResult) {
            this.CopyFolderResult = CopyFolderResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CopyFolderItem", WrapperNamespace="http://vfs.hardcodet.net/ws/", IsWrapped=true)]
    public partial class CopyFolderItemRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://vfs.hardcodet.net/ws/", Order=0)]
        public SLFileBrowser.FileSystemService.VirtualFolderInfo folder;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://vfs.hardcodet.net/ws/", Order=1)]
        public string destinationPath;
        
        public CopyFolderItemRequest() {
        }
        
        public CopyFolderItemRequest(SLFileBrowser.FileSystemService.VirtualFolderInfo folder, string destinationPath) {
            this.folder = folder;
            this.destinationPath = destinationPath;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CopyFolderItemResponse", WrapperNamespace="http://vfs.hardcodet.net/ws/", IsWrapped=true)]
    public partial class CopyFolderItemResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://vfs.hardcodet.net/ws/", Order=0)]
        public SLFileBrowser.FileSystemService.VirtualFolderInfo CopyFolderItemResult;
        
        public CopyFolderItemResponse() {
        }
        
        public CopyFolderItemResponse(SLFileBrowser.FileSystemService.VirtualFolderInfo CopyFolderItemResult) {
            this.CopyFolderItemResult = CopyFolderItemResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CopyFile", WrapperNamespace="http://vfs.hardcodet.net/ws/", IsWrapped=true)]
    public partial class CopyFileRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://vfs.hardcodet.net/ws/", Order=0)]
        public string virtualFilePath;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://vfs.hardcodet.net/ws/", Order=1)]
        public string destinationPath;
        
        public CopyFileRequest() {
        }
        
        public CopyFileRequest(string virtualFilePath, string destinationPath) {
            this.virtualFilePath = virtualFilePath;
            this.destinationPath = destinationPath;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CopyFileResponse", WrapperNamespace="http://vfs.hardcodet.net/ws/", IsWrapped=true)]
    public partial class CopyFileResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://vfs.hardcodet.net/ws/", Order=0)]
        public SLFileBrowser.FileSystemService.VirtualFileInfo CopyFileResult;
        
        public CopyFileResponse() {
        }
        
        public CopyFileResponse(SLFileBrowser.FileSystemService.VirtualFileInfo CopyFileResult) {
            this.CopyFileResult = CopyFileResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CopyFileItem", WrapperNamespace="http://vfs.hardcodet.net/ws/", IsWrapped=true)]
    public partial class CopyFileItemRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://vfs.hardcodet.net/ws/", Order=0)]
        public SLFileBrowser.FileSystemService.VirtualFileInfo file;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://vfs.hardcodet.net/ws/", Order=1)]
        public string destinationPath;
        
        public CopyFileItemRequest() {
        }
        
        public CopyFileItemRequest(SLFileBrowser.FileSystemService.VirtualFileInfo file, string destinationPath) {
            this.file = file;
            this.destinationPath = destinationPath;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CopyFileItemResponse", WrapperNamespace="http://vfs.hardcodet.net/ws/", IsWrapped=true)]
    public partial class CopyFileItemResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://vfs.hardcodet.net/ws/", Order=0)]
        public SLFileBrowser.FileSystemService.VirtualFileInfo CopyFileItemResult;
        
        public CopyFileItemResponse() {
        }
        
        public CopyFileItemResponse(SLFileBrowser.FileSystemService.VirtualFileInfo CopyFileItemResult) {
            this.CopyFileItemResult = CopyFileItemResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CreateFilePath", WrapperNamespace="http://vfs.hardcodet.net/ws/", IsWrapped=true)]
    public partial class CreateFilePathRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://vfs.hardcodet.net/ws/", Order=0)]
        public string parentFolder;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://vfs.hardcodet.net/ws/", Order=1)]
        public string fileName;
        
        public CreateFilePathRequest() {
        }
        
        public CreateFilePathRequest(string parentFolder, string fileName) {
            this.parentFolder = parentFolder;
            this.fileName = fileName;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CreateFilePathResponse", WrapperNamespace="http://vfs.hardcodet.net/ws/", IsWrapped=true)]
    public partial class CreateFilePathResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://vfs.hardcodet.net/ws/", Order=0)]
        public string CreateFilePathResult;
        
        public CreateFilePathResponse() {
        }
        
        public CreateFilePathResponse(string CreateFilePathResult) {
            this.CreateFilePathResult = CreateFilePathResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CreateFolderPath", WrapperNamespace="http://vfs.hardcodet.net/ws/", IsWrapped=true)]
    public partial class CreateFolderPathRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://vfs.hardcodet.net/ws/", Order=0)]
        public string parentFolder;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://vfs.hardcodet.net/ws/", Order=1)]
        public string folderName;
        
        public CreateFolderPathRequest() {
        }
        
        public CreateFolderPathRequest(string parentFolder, string folderName) {
            this.parentFolder = parentFolder;
            this.folderName = folderName;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CreateFolderPathResponse", WrapperNamespace="http://vfs.hardcodet.net/ws/", IsWrapped=true)]
    public partial class CreateFolderPathResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://vfs.hardcodet.net/ws/", Order=0)]
        public string CreateFolderPathResult;
        
        public CreateFolderPathResponse() {
        }
        
        public CreateFolderPathResponse(string CreateFolderPathResult) {
            this.CreateFolderPathResult = CreateFolderPathResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetFileSystemRoot", WrapperNamespace="http://vfs.hardcodet.net/ws/", IsWrapped=true)]
    public partial class GetFileSystemRootRequest {
        
        public GetFileSystemRootRequest() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetFileSystemRootResponse", WrapperNamespace="http://vfs.hardcodet.net/ws/", IsWrapped=true)]
    public partial class GetFileSystemRootResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://vfs.hardcodet.net/ws/", Order=0)]
        public SLFileBrowser.FileSystemService.VirtualFolderInfo GetFileSystemRootResult;
        
        public GetFileSystemRootResponse() {
        }
        
        public GetFileSystemRootResponse(SLFileBrowser.FileSystemService.VirtualFolderInfo GetFileSystemRootResult) {
            this.GetFileSystemRootResult = GetFileSystemRootResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetFileInfo", WrapperNamespace="http://vfs.hardcodet.net/ws/", IsWrapped=true)]
    public partial class GetFileInfoRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://vfs.hardcodet.net/ws/", Order=0)]
        public string virtualFilePath;
        
        public GetFileInfoRequest() {
        }
        
        public GetFileInfoRequest(string virtualFilePath) {
            this.virtualFilePath = virtualFilePath;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetFileInfoResponse", WrapperNamespace="http://vfs.hardcodet.net/ws/", IsWrapped=true)]
    public partial class GetFileInfoResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://vfs.hardcodet.net/ws/", Order=0)]
        public SLFileBrowser.FileSystemService.VirtualFileInfo GetFileInfoResult;
        
        public GetFileInfoResponse() {
        }
        
        public GetFileInfoResponse(SLFileBrowser.FileSystemService.VirtualFileInfo GetFileInfoResult) {
            this.GetFileInfoResult = GetFileInfoResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetFolderInfo", WrapperNamespace="http://vfs.hardcodet.net/ws/", IsWrapped=true)]
    public partial class GetFolderInfoRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://vfs.hardcodet.net/ws/", Order=0)]
        public string virtualFolderPath;
        
        public GetFolderInfoRequest() {
        }
        
        public GetFolderInfoRequest(string virtualFolderPath) {
            this.virtualFolderPath = virtualFolderPath;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetFolderInfoResponse", WrapperNamespace="http://vfs.hardcodet.net/ws/", IsWrapped=true)]
    public partial class GetFolderInfoResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://vfs.hardcodet.net/ws/", Order=0)]
        public SLFileBrowser.FileSystemService.VirtualFolderInfo GetFolderInfoResult;
        
        public GetFolderInfoResponse() {
        }
        
        public GetFolderInfoResponse(SLFileBrowser.FileSystemService.VirtualFolderInfo GetFolderInfoResult) {
            this.GetFolderInfoResult = GetFolderInfoResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetFileParent", WrapperNamespace="http://vfs.hardcodet.net/ws/", IsWrapped=true)]
    public partial class GetFileParentRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://vfs.hardcodet.net/ws/", Order=0)]
        public string childFilePath;
        
        public GetFileParentRequest() {
        }
        
        public GetFileParentRequest(string childFilePath) {
            this.childFilePath = childFilePath;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetFileParentResponse", WrapperNamespace="http://vfs.hardcodet.net/ws/", IsWrapped=true)]
    public partial class GetFileParentResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://vfs.hardcodet.net/ws/", Order=0)]
        public SLFileBrowser.FileSystemService.VirtualFolderInfo GetFileParentResult;
        
        public GetFileParentResponse() {
        }
        
        public GetFileParentResponse(SLFileBrowser.FileSystemService.VirtualFolderInfo GetFileParentResult) {
            this.GetFileParentResult = GetFileParentResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetFileParentByItem", WrapperNamespace="http://vfs.hardcodet.net/ws/", IsWrapped=true)]
    public partial class GetFileParentByItemRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://vfs.hardcodet.net/ws/", Order=0)]
        public SLFileBrowser.FileSystemService.VirtualFileInfo child;
        
        public GetFileParentByItemRequest() {
        }
        
        public GetFileParentByItemRequest(SLFileBrowser.FileSystemService.VirtualFileInfo child) {
            this.child = child;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetFileParentByItemResponse", WrapperNamespace="http://vfs.hardcodet.net/ws/", IsWrapped=true)]
    public partial class GetFileParentByItemResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://vfs.hardcodet.net/ws/", Order=0)]
        public SLFileBrowser.FileSystemService.VirtualFolderInfo GetFileParentByItemResult;
        
        public GetFileParentByItemResponse() {
        }
        
        public GetFileParentByItemResponse(SLFileBrowser.FileSystemService.VirtualFolderInfo GetFileParentByItemResult) {
            this.GetFileParentByItemResult = GetFileParentByItemResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetFolderParent", WrapperNamespace="http://vfs.hardcodet.net/ws/", IsWrapped=true)]
    public partial class GetFolderParentRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://vfs.hardcodet.net/ws/", Order=0)]
        public string childFolderPath;
        
        public GetFolderParentRequest() {
        }
        
        public GetFolderParentRequest(string childFolderPath) {
            this.childFolderPath = childFolderPath;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetFolderParentResponse", WrapperNamespace="http://vfs.hardcodet.net/ws/", IsWrapped=true)]
    public partial class GetFolderParentResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://vfs.hardcodet.net/ws/", Order=0)]
        public SLFileBrowser.FileSystemService.VirtualFolderInfo GetFolderParentResult;
        
        public GetFolderParentResponse() {
        }
        
        public GetFolderParentResponse(SLFileBrowser.FileSystemService.VirtualFolderInfo GetFolderParentResult) {
            this.GetFolderParentResult = GetFolderParentResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetFolderParentByItem", WrapperNamespace="http://vfs.hardcodet.net/ws/", IsWrapped=true)]
    public partial class GetFolderParentByItemRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://vfs.hardcodet.net/ws/", Order=0)]
        public SLFileBrowser.FileSystemService.VirtualFolderInfo child;
        
        public GetFolderParentByItemRequest() {
        }
        
        public GetFolderParentByItemRequest(SLFileBrowser.FileSystemService.VirtualFolderInfo child) {
            this.child = child;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetFolderParentByItemResponse", WrapperNamespace="http://vfs.hardcodet.net/ws/", IsWrapped=true)]
    public partial class GetFolderParentByItemResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://vfs.hardcodet.net/ws/", Order=0)]
        public SLFileBrowser.FileSystemService.VirtualFolderInfo GetFolderParentByItemResult;
        
        public GetFolderParentByItemResponse() {
        }
        
        public GetFolderParentByItemResponse(SLFileBrowser.FileSystemService.VirtualFolderInfo GetFolderParentByItemResult) {
            this.GetFolderParentByItemResult = GetFolderParentByItemResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetChildFolders", WrapperNamespace="http://vfs.hardcodet.net/ws/", IsWrapped=true)]
    public partial class GetChildFoldersRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://vfs.hardcodet.net/ws/", Order=0)]
        public string parentFolderPath;
        
        public GetChildFoldersRequest() {
        }
        
        public GetChildFoldersRequest(string parentFolderPath) {
            this.parentFolderPath = parentFolderPath;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetChildFoldersResponse", WrapperNamespace="http://vfs.hardcodet.net/ws/", IsWrapped=true)]
    public partial class GetChildFoldersResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://vfs.hardcodet.net/ws/", Order=0)]
        public System.Collections.ObjectModel.ObservableCollection<SLFileBrowser.FileSystemService.VirtualFolderInfo> GetChildFoldersResult;
        
        public GetChildFoldersResponse() {
        }
        
        public GetChildFoldersResponse(System.Collections.ObjectModel.ObservableCollection<SLFileBrowser.FileSystemService.VirtualFolderInfo> GetChildFoldersResult) {
            this.GetChildFoldersResult = GetChildFoldersResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetChildFoldersByItem", WrapperNamespace="http://vfs.hardcodet.net/ws/", IsWrapped=true)]
    public partial class GetChildFoldersByItemRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://vfs.hardcodet.net/ws/", Order=0)]
        public SLFileBrowser.FileSystemService.VirtualFolderInfo parent;
        
        public GetChildFoldersByItemRequest() {
        }
        
        public GetChildFoldersByItemRequest(SLFileBrowser.FileSystemService.VirtualFolderInfo parent) {
            this.parent = parent;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetChildFoldersByItemResponse", WrapperNamespace="http://vfs.hardcodet.net/ws/", IsWrapped=true)]
    public partial class GetChildFoldersByItemResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://vfs.hardcodet.net/ws/", Order=0)]
        public System.Collections.ObjectModel.ObservableCollection<SLFileBrowser.FileSystemService.VirtualFolderInfo> GetChildFoldersByItemResult;
        
        public GetChildFoldersByItemResponse() {
        }
        
        public GetChildFoldersByItemResponse(System.Collections.ObjectModel.ObservableCollection<SLFileBrowser.FileSystemService.VirtualFolderInfo> GetChildFoldersByItemResult) {
            this.GetChildFoldersByItemResult = GetChildFoldersByItemResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetFilteredChildFolders", WrapperNamespace="http://vfs.hardcodet.net/ws/", IsWrapped=true)]
    public partial class GetFilteredChildFoldersRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://vfs.hardcodet.net/ws/", Order=0)]
        public string parentFolderPath;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://vfs.hardcodet.net/ws/", Order=1)]
        public string searchPattern;
        
        public GetFilteredChildFoldersRequest() {
        }
        
        public GetFilteredChildFoldersRequest(string parentFolderPath, string searchPattern) {
            this.parentFolderPath = parentFolderPath;
            this.searchPattern = searchPattern;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetFilteredChildFoldersResponse", WrapperNamespace="http://vfs.hardcodet.net/ws/", IsWrapped=true)]
    public partial class GetFilteredChildFoldersResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://vfs.hardcodet.net/ws/", Order=0)]
        public System.Collections.ObjectModel.ObservableCollection<SLFileBrowser.FileSystemService.VirtualFolderInfo> GetFilteredChildFoldersResult;
        
        public GetFilteredChildFoldersResponse() {
        }
        
        public GetFilteredChildFoldersResponse(System.Collections.ObjectModel.ObservableCollection<SLFileBrowser.FileSystemService.VirtualFolderInfo> GetFilteredChildFoldersResult) {
            this.GetFilteredChildFoldersResult = GetFilteredChildFoldersResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetFilteredChildFoldersByItem", WrapperNamespace="http://vfs.hardcodet.net/ws/", IsWrapped=true)]
    public partial class GetFilteredChildFoldersByItemRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://vfs.hardcodet.net/ws/", Order=0)]
        public SLFileBrowser.FileSystemService.VirtualFolderInfo parent;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://vfs.hardcodet.net/ws/", Order=1)]
        public string searchPattern;
        
        public GetFilteredChildFoldersByItemRequest() {
        }
        
        public GetFilteredChildFoldersByItemRequest(SLFileBrowser.FileSystemService.VirtualFolderInfo parent, string searchPattern) {
            this.parent = parent;
            this.searchPattern = searchPattern;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetFilteredChildFoldersByItemResponse", WrapperNamespace="http://vfs.hardcodet.net/ws/", IsWrapped=true)]
    public partial class GetFilteredChildFoldersByItemResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://vfs.hardcodet.net/ws/", Order=0)]
        public System.Collections.ObjectModel.ObservableCollection<SLFileBrowser.FileSystemService.VirtualFolderInfo> GetFilteredChildFoldersByItemResult;
        
        public GetFilteredChildFoldersByItemResponse() {
        }
        
        public GetFilteredChildFoldersByItemResponse(System.Collections.ObjectModel.ObservableCollection<SLFileBrowser.FileSystemService.VirtualFolderInfo> GetFilteredChildFoldersByItemResult) {
            this.GetFilteredChildFoldersByItemResult = GetFilteredChildFoldersByItemResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetChildFiles", WrapperNamespace="http://vfs.hardcodet.net/ws/", IsWrapped=true)]
    public partial class GetChildFilesRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://vfs.hardcodet.net/ws/", Order=0)]
        public string parentFolderPath;
        
        public GetChildFilesRequest() {
        }
        
        public GetChildFilesRequest(string parentFolderPath) {
            this.parentFolderPath = parentFolderPath;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetChildFilesResponse", WrapperNamespace="http://vfs.hardcodet.net/ws/", IsWrapped=true)]
    public partial class GetChildFilesResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://vfs.hardcodet.net/ws/", Order=0)]
        public System.Collections.ObjectModel.ObservableCollection<SLFileBrowser.FileSystemService.VirtualFileInfo> GetChildFilesResult;
        
        public GetChildFilesResponse() {
        }
        
        public GetChildFilesResponse(System.Collections.ObjectModel.ObservableCollection<SLFileBrowser.FileSystemService.VirtualFileInfo> GetChildFilesResult) {
            this.GetChildFilesResult = GetChildFilesResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetChildFilesByItem", WrapperNamespace="http://vfs.hardcodet.net/ws/", IsWrapped=true)]
    public partial class GetChildFilesByItemRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://vfs.hardcodet.net/ws/", Order=0)]
        public SLFileBrowser.FileSystemService.VirtualFolderInfo parent;
        
        public GetChildFilesByItemRequest() {
        }
        
        public GetChildFilesByItemRequest(SLFileBrowser.FileSystemService.VirtualFolderInfo parent) {
            this.parent = parent;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetChildFilesByItemResponse", WrapperNamespace="http://vfs.hardcodet.net/ws/", IsWrapped=true)]
    public partial class GetChildFilesByItemResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://vfs.hardcodet.net/ws/", Order=0)]
        public System.Collections.ObjectModel.ObservableCollection<SLFileBrowser.FileSystemService.VirtualFileInfo> GetChildFilesByItemResult;
        
        public GetChildFilesByItemResponse() {
        }
        
        public GetChildFilesByItemResponse(System.Collections.ObjectModel.ObservableCollection<SLFileBrowser.FileSystemService.VirtualFileInfo> GetChildFilesByItemResult) {
            this.GetChildFilesByItemResult = GetChildFilesByItemResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetFilteredChildFiles", WrapperNamespace="http://vfs.hardcodet.net/ws/", IsWrapped=true)]
    public partial class GetFilteredChildFilesRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://vfs.hardcodet.net/ws/", Order=0)]
        public string parentFolderPath;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://vfs.hardcodet.net/ws/", Order=1)]
        public string searchPattern;
        
        public GetFilteredChildFilesRequest() {
        }
        
        public GetFilteredChildFilesRequest(string parentFolderPath, string searchPattern) {
            this.parentFolderPath = parentFolderPath;
            this.searchPattern = searchPattern;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetFilteredChildFilesResponse", WrapperNamespace="http://vfs.hardcodet.net/ws/", IsWrapped=true)]
    public partial class GetFilteredChildFilesResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://vfs.hardcodet.net/ws/", Order=0)]
        public System.Collections.ObjectModel.ObservableCollection<SLFileBrowser.FileSystemService.VirtualFileInfo> GetFilteredChildFilesResult;
        
        public GetFilteredChildFilesResponse() {
        }
        
        public GetFilteredChildFilesResponse(System.Collections.ObjectModel.ObservableCollection<SLFileBrowser.FileSystemService.VirtualFileInfo> GetFilteredChildFilesResult) {
            this.GetFilteredChildFilesResult = GetFilteredChildFilesResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetFilteredChildFilesByItem", WrapperNamespace="http://vfs.hardcodet.net/ws/", IsWrapped=true)]
    public partial class GetFilteredChildFilesByItemRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://vfs.hardcodet.net/ws/", Order=0)]
        public SLFileBrowser.FileSystemService.VirtualFolderInfo parent;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://vfs.hardcodet.net/ws/", Order=1)]
        public string searchPattern;
        
        public GetFilteredChildFilesByItemRequest() {
        }
        
        public GetFilteredChildFilesByItemRequest(SLFileBrowser.FileSystemService.VirtualFolderInfo parent, string searchPattern) {
            this.parent = parent;
            this.searchPattern = searchPattern;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetFilteredChildFilesByItemResponse", WrapperNamespace="http://vfs.hardcodet.net/ws/", IsWrapped=true)]
    public partial class GetFilteredChildFilesByItemResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://vfs.hardcodet.net/ws/", Order=0)]
        public System.Collections.ObjectModel.ObservableCollection<SLFileBrowser.FileSystemService.VirtualFileInfo> GetFilteredChildFilesByItemResult;
        
        public GetFilteredChildFilesByItemResponse() {
        }
        
        public GetFilteredChildFilesByItemResponse(System.Collections.ObjectModel.ObservableCollection<SLFileBrowser.FileSystemService.VirtualFileInfo> GetFilteredChildFilesByItemResult) {
            this.GetFilteredChildFilesByItemResult = GetFilteredChildFilesByItemResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetFolderContents", WrapperNamespace="http://vfs.hardcodet.net/ws/", IsWrapped=true)]
    public partial class GetFolderContentsRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://vfs.hardcodet.net/ws/", Order=0)]
        public string parentFolderPath;
        
        public GetFolderContentsRequest() {
        }
        
        public GetFolderContentsRequest(string parentFolderPath) {
            this.parentFolderPath = parentFolderPath;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetFolderContentsResponse", WrapperNamespace="http://vfs.hardcodet.net/ws/", IsWrapped=true)]
    public partial class GetFolderContentsResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://vfs.hardcodet.net/ws/", Order=0)]
        public SLFileBrowser.FileSystemService.FolderContentsInfo GetFolderContentsResult;
        
        public GetFolderContentsResponse() {
        }
        
        public GetFolderContentsResponse(SLFileBrowser.FileSystemService.FolderContentsInfo GetFolderContentsResult) {
            this.GetFolderContentsResult = GetFolderContentsResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetFolderContentsByItem", WrapperNamespace="http://vfs.hardcodet.net/ws/", IsWrapped=true)]
    public partial class GetFolderContentsByItemRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://vfs.hardcodet.net/ws/", Order=0)]
        public SLFileBrowser.FileSystemService.VirtualFolderInfo parent;
        
        public GetFolderContentsByItemRequest() {
        }
        
        public GetFolderContentsByItemRequest(SLFileBrowser.FileSystemService.VirtualFolderInfo parent) {
            this.parent = parent;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetFolderContentsByItemResponse", WrapperNamespace="http://vfs.hardcodet.net/ws/", IsWrapped=true)]
    public partial class GetFolderContentsByItemResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://vfs.hardcodet.net/ws/", Order=0)]
        public SLFileBrowser.FileSystemService.FolderContentsInfo GetFolderContentsByItemResult;
        
        public GetFolderContentsByItemResponse() {
        }
        
        public GetFolderContentsByItemResponse(SLFileBrowser.FileSystemService.FolderContentsInfo GetFolderContentsByItemResult) {
            this.GetFolderContentsByItemResult = GetFolderContentsByItemResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetFilteredFolderContents", WrapperNamespace="http://vfs.hardcodet.net/ws/", IsWrapped=true)]
    public partial class GetFilteredFolderContentsRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://vfs.hardcodet.net/ws/", Order=0)]
        public string parentFolderPath;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://vfs.hardcodet.net/ws/", Order=1)]
        public string searchPattern;
        
        public GetFilteredFolderContentsRequest() {
        }
        
        public GetFilteredFolderContentsRequest(string parentFolderPath, string searchPattern) {
            this.parentFolderPath = parentFolderPath;
            this.searchPattern = searchPattern;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetFilteredFolderContentsResponse", WrapperNamespace="http://vfs.hardcodet.net/ws/", IsWrapped=true)]
    public partial class GetFilteredFolderContentsResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://vfs.hardcodet.net/ws/", Order=0)]
        public SLFileBrowser.FileSystemService.FolderContentsInfo GetFilteredFolderContentsResult;
        
        public GetFilteredFolderContentsResponse() {
        }
        
        public GetFilteredFolderContentsResponse(SLFileBrowser.FileSystemService.FolderContentsInfo GetFilteredFolderContentsResult) {
            this.GetFilteredFolderContentsResult = GetFilteredFolderContentsResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetFilteredFolderContentsByItem", WrapperNamespace="http://vfs.hardcodet.net/ws/", IsWrapped=true)]
    public partial class GetFilteredFolderContentsByItemRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://vfs.hardcodet.net/ws/", Order=0)]
        public SLFileBrowser.FileSystemService.VirtualFolderInfo parent;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://vfs.hardcodet.net/ws/", Order=1)]
        public string searchPattern;
        
        public GetFilteredFolderContentsByItemRequest() {
        }
        
        public GetFilteredFolderContentsByItemRequest(SLFileBrowser.FileSystemService.VirtualFolderInfo parent, string searchPattern) {
            this.parent = parent;
            this.searchPattern = searchPattern;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetFilteredFolderContentsByItemResponse", WrapperNamespace="http://vfs.hardcodet.net/ws/", IsWrapped=true)]
    public partial class GetFilteredFolderContentsByItemResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://vfs.hardcodet.net/ws/", Order=0)]
        public SLFileBrowser.FileSystemService.FolderContentsInfo GetFilteredFolderContentsByItemResult;
        
        public GetFilteredFolderContentsByItemResponse() {
        }
        
        public GetFilteredFolderContentsByItemResponse(SLFileBrowser.FileSystemService.FolderContentsInfo GetFilteredFolderContentsByItemResult) {
            this.GetFilteredFolderContentsByItemResult = GetFilteredFolderContentsByItemResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="IsFileAvailable", WrapperNamespace="http://vfs.hardcodet.net/ws/", IsWrapped=true)]
    public partial class IsFileAvailableRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://vfs.hardcodet.net/ws/", Order=0)]
        public string virtualFilePath;
        
        public IsFileAvailableRequest() {
        }
        
        public IsFileAvailableRequest(string virtualFilePath) {
            this.virtualFilePath = virtualFilePath;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="IsFileAvailableResponse", WrapperNamespace="http://vfs.hardcodet.net/ws/", IsWrapped=true)]
    public partial class IsFileAvailableResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://vfs.hardcodet.net/ws/", Order=0)]
        public bool IsFileAvailableResult;
        
        public IsFileAvailableResponse() {
        }
        
        public IsFileAvailableResponse(bool IsFileAvailableResult) {
            this.IsFileAvailableResult = IsFileAvailableResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="IsFolderAvailable", WrapperNamespace="http://vfs.hardcodet.net/ws/", IsWrapped=true)]
    public partial class IsFolderAvailableRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://vfs.hardcodet.net/ws/", Order=0)]
        public string virtualFolderPath;
        
        public IsFolderAvailableRequest() {
        }
        
        public IsFolderAvailableRequest(string virtualFolderPath) {
            this.virtualFolderPath = virtualFolderPath;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="IsFolderAvailableResponse", WrapperNamespace="http://vfs.hardcodet.net/ws/", IsWrapped=true)]
    public partial class IsFolderAvailableResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://vfs.hardcodet.net/ws/", Order=0)]
        public bool IsFolderAvailableResult;
        
        public IsFolderAvailableResponse() {
        }
        
        public IsFolderAvailableResponse(bool IsFolderAvailableResult) {
            this.IsFolderAvailableResult = IsFolderAvailableResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CreateFolderUnderParent", WrapperNamespace="http://vfs.hardcodet.net/ws/", IsWrapped=true)]
    public partial class CreateFolderUnderParentRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://vfs.hardcodet.net/ws/", Order=0)]
        public string parentFolderPath;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://vfs.hardcodet.net/ws/", Order=1)]
        public string folderName;
        
        public CreateFolderUnderParentRequest() {
        }
        
        public CreateFolderUnderParentRequest(string parentFolderPath, string folderName) {
            this.parentFolderPath = parentFolderPath;
            this.folderName = folderName;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CreateFolderUnderParentResponse", WrapperNamespace="http://vfs.hardcodet.net/ws/", IsWrapped=true)]
    public partial class CreateFolderUnderParentResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://vfs.hardcodet.net/ws/", Order=0)]
        public SLFileBrowser.FileSystemService.VirtualFolderInfo CreateFolderUnderParentResult;
        
        public CreateFolderUnderParentResponse() {
        }
        
        public CreateFolderUnderParentResponse(SLFileBrowser.FileSystemService.VirtualFolderInfo CreateFolderUnderParentResult) {
            this.CreateFolderUnderParentResult = CreateFolderUnderParentResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CreateFolder", WrapperNamespace="http://vfs.hardcodet.net/ws/", IsWrapped=true)]
    public partial class CreateFolderRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://vfs.hardcodet.net/ws/", Order=0)]
        public string virtualFolderPath;
        
        public CreateFolderRequest() {
        }
        
        public CreateFolderRequest(string virtualFolderPath) {
            this.virtualFolderPath = virtualFolderPath;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CreateFolderResponse", WrapperNamespace="http://vfs.hardcodet.net/ws/", IsWrapped=true)]
    public partial class CreateFolderResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://vfs.hardcodet.net/ws/", Order=0)]
        public SLFileBrowser.FileSystemService.VirtualFolderInfo CreateFolderResult;
        
        public CreateFolderResponse() {
        }
        
        public CreateFolderResponse(SLFileBrowser.FileSystemService.VirtualFolderInfo CreateFolderResult) {
            this.CreateFolderResult = CreateFolderResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CreateFolderUnderParentItem", WrapperNamespace="http://vfs.hardcodet.net/ws/", IsWrapped=true)]
    public partial class CreateFolderUnderParentItemRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://vfs.hardcodet.net/ws/", Order=0)]
        public SLFileBrowser.FileSystemService.VirtualFolderInfo parent;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://vfs.hardcodet.net/ws/", Order=1)]
        public string folderName;
        
        public CreateFolderUnderParentItemRequest() {
        }
        
        public CreateFolderUnderParentItemRequest(SLFileBrowser.FileSystemService.VirtualFolderInfo parent, string folderName) {
            this.parent = parent;
            this.folderName = folderName;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CreateFolderUnderParentItemResponse", WrapperNamespace="http://vfs.hardcodet.net/ws/", IsWrapped=true)]
    public partial class CreateFolderUnderParentItemResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://vfs.hardcodet.net/ws/", Order=0)]
        public SLFileBrowser.FileSystemService.VirtualFolderInfo CreateFolderUnderParentItemResult;
        
        public CreateFolderUnderParentItemResponse() {
        }
        
        public CreateFolderUnderParentItemResponse(SLFileBrowser.FileSystemService.VirtualFolderInfo CreateFolderUnderParentItemResult) {
            this.CreateFolderUnderParentItemResult = CreateFolderUnderParentItemResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DeleteFolder", WrapperNamespace="http://vfs.hardcodet.net/ws/", IsWrapped=true)]
    public partial class DeleteFolderRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://vfs.hardcodet.net/ws/", Order=0)]
        public string virtualFolderPath;
        
        public DeleteFolderRequest() {
        }
        
        public DeleteFolderRequest(string virtualFolderPath) {
            this.virtualFolderPath = virtualFolderPath;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DeleteFolderResponse", WrapperNamespace="http://vfs.hardcodet.net/ws/", IsWrapped=true)]
    public partial class DeleteFolderResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://vfs.hardcodet.net/ws/", Order=0)]
        public bool DeleteFolderResult;
        
        public DeleteFolderResponse() {
        }
        
        public DeleteFolderResponse(bool DeleteFolderResult) {
            this.DeleteFolderResult = DeleteFolderResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DeleteFile", WrapperNamespace="http://vfs.hardcodet.net/ws/", IsWrapped=true)]
    public partial class DeleteFileRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://vfs.hardcodet.net/ws/", Order=0)]
        public string virtualFilePath;
        
        public DeleteFileRequest() {
        }
        
        public DeleteFileRequest(string virtualFilePath) {
            this.virtualFilePath = virtualFilePath;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DeleteFileResponse", WrapperNamespace="http://vfs.hardcodet.net/ws/", IsWrapped=true)]
    public partial class DeleteFileResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://vfs.hardcodet.net/ws/", Order=0)]
        public bool DeleteFileResult;
        
        public DeleteFileResponse() {
        }
        
        public DeleteFileResponse(bool DeleteFileResult) {
            this.DeleteFileResult = DeleteFileResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="MoveFolder", WrapperNamespace="http://vfs.hardcodet.net/ws/", IsWrapped=true)]
    public partial class MoveFolderRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://vfs.hardcodet.net/ws/", Order=0)]
        public string virtualFolderPath;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://vfs.hardcodet.net/ws/", Order=1)]
        public string destinationPath;
        
        public MoveFolderRequest() {
        }
        
        public MoveFolderRequest(string virtualFolderPath, string destinationPath) {
            this.virtualFolderPath = virtualFolderPath;
            this.destinationPath = destinationPath;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="MoveFolderResponse", WrapperNamespace="http://vfs.hardcodet.net/ws/", IsWrapped=true)]
    public partial class MoveFolderResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://vfs.hardcodet.net/ws/", Order=0)]
        public SLFileBrowser.FileSystemService.VirtualFolderInfo MoveFolderResult;
        
        public MoveFolderResponse() {
        }
        
        public MoveFolderResponse(SLFileBrowser.FileSystemService.VirtualFolderInfo MoveFolderResult) {
            this.MoveFolderResult = MoveFolderResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="MoveFolderItem", WrapperNamespace="http://vfs.hardcodet.net/ws/", IsWrapped=true)]
    public partial class MoveFolderItemRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://vfs.hardcodet.net/ws/", Order=0)]
        public SLFileBrowser.FileSystemService.VirtualFolderInfo folder;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://vfs.hardcodet.net/ws/", Order=1)]
        public string destinationPath;
        
        public MoveFolderItemRequest() {
        }
        
        public MoveFolderItemRequest(SLFileBrowser.FileSystemService.VirtualFolderInfo folder, string destinationPath) {
            this.folder = folder;
            this.destinationPath = destinationPath;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="MoveFolderItemResponse", WrapperNamespace="http://vfs.hardcodet.net/ws/", IsWrapped=true)]
    public partial class MoveFolderItemResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://vfs.hardcodet.net/ws/", Order=0)]
        public SLFileBrowser.FileSystemService.VirtualFolderInfo MoveFolderItemResult;
        
        public MoveFolderItemResponse() {
        }
        
        public MoveFolderItemResponse(SLFileBrowser.FileSystemService.VirtualFolderInfo MoveFolderItemResult) {
            this.MoveFolderItemResult = MoveFolderItemResult;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFSOperationServiceChannel : SLFileBrowser.FileSystemService.IFSOperationService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MoveFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public MoveFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SLFileBrowser.FileSystemService.MoveFileResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SLFileBrowser.FileSystemService.MoveFileResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MoveFileItemCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public MoveFileItemCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SLFileBrowser.FileSystemService.MoveFileItemResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SLFileBrowser.FileSystemService.MoveFileItemResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CopyFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CopyFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SLFileBrowser.FileSystemService.CopyFolderResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SLFileBrowser.FileSystemService.CopyFolderResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CopyFolderItemCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CopyFolderItemCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SLFileBrowser.FileSystemService.CopyFolderItemResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SLFileBrowser.FileSystemService.CopyFolderItemResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CopyFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CopyFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SLFileBrowser.FileSystemService.CopyFileResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SLFileBrowser.FileSystemService.CopyFileResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CopyFileItemCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CopyFileItemCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SLFileBrowser.FileSystemService.CopyFileItemResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SLFileBrowser.FileSystemService.CopyFileItemResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CreateFilePathCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CreateFilePathCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SLFileBrowser.FileSystemService.CreateFilePathResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SLFileBrowser.FileSystemService.CreateFilePathResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CreateFolderPathCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CreateFolderPathCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SLFileBrowser.FileSystemService.CreateFolderPathResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SLFileBrowser.FileSystemService.CreateFolderPathResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetFileSystemRootCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFileSystemRootCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SLFileBrowser.FileSystemService.GetFileSystemRootResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SLFileBrowser.FileSystemService.GetFileSystemRootResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetFileInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFileInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SLFileBrowser.FileSystemService.GetFileInfoResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SLFileBrowser.FileSystemService.GetFileInfoResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetFolderInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFolderInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SLFileBrowser.FileSystemService.GetFolderInfoResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SLFileBrowser.FileSystemService.GetFolderInfoResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetFileParentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFileParentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SLFileBrowser.FileSystemService.GetFileParentResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SLFileBrowser.FileSystemService.GetFileParentResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetFileParentByItemCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFileParentByItemCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SLFileBrowser.FileSystemService.GetFileParentByItemResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SLFileBrowser.FileSystemService.GetFileParentByItemResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetFolderParentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFolderParentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SLFileBrowser.FileSystemService.GetFolderParentResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SLFileBrowser.FileSystemService.GetFolderParentResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetFolderParentByItemCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFolderParentByItemCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SLFileBrowser.FileSystemService.GetFolderParentByItemResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SLFileBrowser.FileSystemService.GetFolderParentByItemResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetChildFoldersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetChildFoldersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SLFileBrowser.FileSystemService.GetChildFoldersResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SLFileBrowser.FileSystemService.GetChildFoldersResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetChildFoldersByItemCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetChildFoldersByItemCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SLFileBrowser.FileSystemService.GetChildFoldersByItemResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SLFileBrowser.FileSystemService.GetChildFoldersByItemResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetFilteredChildFoldersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFilteredChildFoldersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SLFileBrowser.FileSystemService.GetFilteredChildFoldersResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SLFileBrowser.FileSystemService.GetFilteredChildFoldersResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetFilteredChildFoldersByItemCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFilteredChildFoldersByItemCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SLFileBrowser.FileSystemService.GetFilteredChildFoldersByItemResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SLFileBrowser.FileSystemService.GetFilteredChildFoldersByItemResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetChildFilesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetChildFilesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SLFileBrowser.FileSystemService.GetChildFilesResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SLFileBrowser.FileSystemService.GetChildFilesResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetChildFilesByItemCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetChildFilesByItemCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SLFileBrowser.FileSystemService.GetChildFilesByItemResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SLFileBrowser.FileSystemService.GetChildFilesByItemResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetFilteredChildFilesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFilteredChildFilesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SLFileBrowser.FileSystemService.GetFilteredChildFilesResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SLFileBrowser.FileSystemService.GetFilteredChildFilesResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetFilteredChildFilesByItemCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFilteredChildFilesByItemCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SLFileBrowser.FileSystemService.GetFilteredChildFilesByItemResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SLFileBrowser.FileSystemService.GetFilteredChildFilesByItemResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetFolderContentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFolderContentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SLFileBrowser.FileSystemService.GetFolderContentsResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SLFileBrowser.FileSystemService.GetFolderContentsResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetFolderContentsByItemCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFolderContentsByItemCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SLFileBrowser.FileSystemService.GetFolderContentsByItemResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SLFileBrowser.FileSystemService.GetFolderContentsByItemResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetFilteredFolderContentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFilteredFolderContentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SLFileBrowser.FileSystemService.GetFilteredFolderContentsResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SLFileBrowser.FileSystemService.GetFilteredFolderContentsResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetFilteredFolderContentsByItemCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFilteredFolderContentsByItemCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SLFileBrowser.FileSystemService.GetFilteredFolderContentsByItemResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SLFileBrowser.FileSystemService.GetFilteredFolderContentsByItemResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class IsFileAvailableCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public IsFileAvailableCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SLFileBrowser.FileSystemService.IsFileAvailableResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SLFileBrowser.FileSystemService.IsFileAvailableResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class IsFolderAvailableCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public IsFolderAvailableCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SLFileBrowser.FileSystemService.IsFolderAvailableResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SLFileBrowser.FileSystemService.IsFolderAvailableResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CreateFolderUnderParentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CreateFolderUnderParentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SLFileBrowser.FileSystemService.CreateFolderUnderParentResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SLFileBrowser.FileSystemService.CreateFolderUnderParentResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CreateFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CreateFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SLFileBrowser.FileSystemService.CreateFolderResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SLFileBrowser.FileSystemService.CreateFolderResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CreateFolderUnderParentItemCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CreateFolderUnderParentItemCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SLFileBrowser.FileSystemService.CreateFolderUnderParentItemResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SLFileBrowser.FileSystemService.CreateFolderUnderParentItemResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeleteFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SLFileBrowser.FileSystemService.DeleteFolderResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SLFileBrowser.FileSystemService.DeleteFolderResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeleteFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SLFileBrowser.FileSystemService.DeleteFileResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SLFileBrowser.FileSystemService.DeleteFileResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MoveFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public MoveFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SLFileBrowser.FileSystemService.MoveFolderResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SLFileBrowser.FileSystemService.MoveFolderResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MoveFolderItemCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public MoveFolderItemCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SLFileBrowser.FileSystemService.MoveFolderItemResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SLFileBrowser.FileSystemService.MoveFolderItemResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FSOperationServiceClient : System.ServiceModel.ClientBase<SLFileBrowser.FileSystemService.IFSOperationService>, SLFileBrowser.FileSystemService.IFSOperationService {
        
        private BeginOperationDelegate onBeginMoveFileDelegate;
        
        private EndOperationDelegate onEndMoveFileDelegate;
        
        private System.Threading.SendOrPostCallback onMoveFileCompletedDelegate;
        
        private BeginOperationDelegate onBeginMoveFileItemDelegate;
        
        private EndOperationDelegate onEndMoveFileItemDelegate;
        
        private System.Threading.SendOrPostCallback onMoveFileItemCompletedDelegate;
        
        private BeginOperationDelegate onBeginCopyFolderDelegate;
        
        private EndOperationDelegate onEndCopyFolderDelegate;
        
        private System.Threading.SendOrPostCallback onCopyFolderCompletedDelegate;
        
        private BeginOperationDelegate onBeginCopyFolderItemDelegate;
        
        private EndOperationDelegate onEndCopyFolderItemDelegate;
        
        private System.Threading.SendOrPostCallback onCopyFolderItemCompletedDelegate;
        
        private BeginOperationDelegate onBeginCopyFileDelegate;
        
        private EndOperationDelegate onEndCopyFileDelegate;
        
        private System.Threading.SendOrPostCallback onCopyFileCompletedDelegate;
        
        private BeginOperationDelegate onBeginCopyFileItemDelegate;
        
        private EndOperationDelegate onEndCopyFileItemDelegate;
        
        private System.Threading.SendOrPostCallback onCopyFileItemCompletedDelegate;
        
        private BeginOperationDelegate onBeginCreateFilePathDelegate;
        
        private EndOperationDelegate onEndCreateFilePathDelegate;
        
        private System.Threading.SendOrPostCallback onCreateFilePathCompletedDelegate;
        
        private BeginOperationDelegate onBeginCreateFolderPathDelegate;
        
        private EndOperationDelegate onEndCreateFolderPathDelegate;
        
        private System.Threading.SendOrPostCallback onCreateFolderPathCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetFileSystemRootDelegate;
        
        private EndOperationDelegate onEndGetFileSystemRootDelegate;
        
        private System.Threading.SendOrPostCallback onGetFileSystemRootCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetFileInfoDelegate;
        
        private EndOperationDelegate onEndGetFileInfoDelegate;
        
        private System.Threading.SendOrPostCallback onGetFileInfoCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetFolderInfoDelegate;
        
        private EndOperationDelegate onEndGetFolderInfoDelegate;
        
        private System.Threading.SendOrPostCallback onGetFolderInfoCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetFileParentDelegate;
        
        private EndOperationDelegate onEndGetFileParentDelegate;
        
        private System.Threading.SendOrPostCallback onGetFileParentCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetFileParentByItemDelegate;
        
        private EndOperationDelegate onEndGetFileParentByItemDelegate;
        
        private System.Threading.SendOrPostCallback onGetFileParentByItemCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetFolderParentDelegate;
        
        private EndOperationDelegate onEndGetFolderParentDelegate;
        
        private System.Threading.SendOrPostCallback onGetFolderParentCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetFolderParentByItemDelegate;
        
        private EndOperationDelegate onEndGetFolderParentByItemDelegate;
        
        private System.Threading.SendOrPostCallback onGetFolderParentByItemCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetChildFoldersDelegate;
        
        private EndOperationDelegate onEndGetChildFoldersDelegate;
        
        private System.Threading.SendOrPostCallback onGetChildFoldersCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetChildFoldersByItemDelegate;
        
        private EndOperationDelegate onEndGetChildFoldersByItemDelegate;
        
        private System.Threading.SendOrPostCallback onGetChildFoldersByItemCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetFilteredChildFoldersDelegate;
        
        private EndOperationDelegate onEndGetFilteredChildFoldersDelegate;
        
        private System.Threading.SendOrPostCallback onGetFilteredChildFoldersCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetFilteredChildFoldersByItemDelegate;
        
        private EndOperationDelegate onEndGetFilteredChildFoldersByItemDelegate;
        
        private System.Threading.SendOrPostCallback onGetFilteredChildFoldersByItemCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetChildFilesDelegate;
        
        private EndOperationDelegate onEndGetChildFilesDelegate;
        
        private System.Threading.SendOrPostCallback onGetChildFilesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetChildFilesByItemDelegate;
        
        private EndOperationDelegate onEndGetChildFilesByItemDelegate;
        
        private System.Threading.SendOrPostCallback onGetChildFilesByItemCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetFilteredChildFilesDelegate;
        
        private EndOperationDelegate onEndGetFilteredChildFilesDelegate;
        
        private System.Threading.SendOrPostCallback onGetFilteredChildFilesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetFilteredChildFilesByItemDelegate;
        
        private EndOperationDelegate onEndGetFilteredChildFilesByItemDelegate;
        
        private System.Threading.SendOrPostCallback onGetFilteredChildFilesByItemCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetFolderContentsDelegate;
        
        private EndOperationDelegate onEndGetFolderContentsDelegate;
        
        private System.Threading.SendOrPostCallback onGetFolderContentsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetFolderContentsByItemDelegate;
        
        private EndOperationDelegate onEndGetFolderContentsByItemDelegate;
        
        private System.Threading.SendOrPostCallback onGetFolderContentsByItemCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetFilteredFolderContentsDelegate;
        
        private EndOperationDelegate onEndGetFilteredFolderContentsDelegate;
        
        private System.Threading.SendOrPostCallback onGetFilteredFolderContentsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetFilteredFolderContentsByItemDelegate;
        
        private EndOperationDelegate onEndGetFilteredFolderContentsByItemDelegate;
        
        private System.Threading.SendOrPostCallback onGetFilteredFolderContentsByItemCompletedDelegate;
        
        private BeginOperationDelegate onBeginIsFileAvailableDelegate;
        
        private EndOperationDelegate onEndIsFileAvailableDelegate;
        
        private System.Threading.SendOrPostCallback onIsFileAvailableCompletedDelegate;
        
        private BeginOperationDelegate onBeginIsFolderAvailableDelegate;
        
        private EndOperationDelegate onEndIsFolderAvailableDelegate;
        
        private System.Threading.SendOrPostCallback onIsFolderAvailableCompletedDelegate;
        
        private BeginOperationDelegate onBeginCreateFolderUnderParentDelegate;
        
        private EndOperationDelegate onEndCreateFolderUnderParentDelegate;
        
        private System.Threading.SendOrPostCallback onCreateFolderUnderParentCompletedDelegate;
        
        private BeginOperationDelegate onBeginCreateFolderDelegate;
        
        private EndOperationDelegate onEndCreateFolderDelegate;
        
        private System.Threading.SendOrPostCallback onCreateFolderCompletedDelegate;
        
        private BeginOperationDelegate onBeginCreateFolderUnderParentItemDelegate;
        
        private EndOperationDelegate onEndCreateFolderUnderParentItemDelegate;
        
        private System.Threading.SendOrPostCallback onCreateFolderUnderParentItemCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteFolderDelegate;
        
        private EndOperationDelegate onEndDeleteFolderDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteFolderCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteFileDelegate;
        
        private EndOperationDelegate onEndDeleteFileDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteFileCompletedDelegate;
        
        private BeginOperationDelegate onBeginMoveFolderDelegate;
        
        private EndOperationDelegate onEndMoveFolderDelegate;
        
        private System.Threading.SendOrPostCallback onMoveFolderCompletedDelegate;
        
        private BeginOperationDelegate onBeginMoveFolderItemDelegate;
        
        private EndOperationDelegate onEndMoveFolderItemDelegate;
        
        private System.Threading.SendOrPostCallback onMoveFolderItemCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public FSOperationServiceClient() {
        }
        
        public FSOperationServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FSOperationServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FSOperationServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FSOperationServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<MoveFileCompletedEventArgs> MoveFileCompleted;
        
        public event System.EventHandler<MoveFileItemCompletedEventArgs> MoveFileItemCompleted;
        
        public event System.EventHandler<CopyFolderCompletedEventArgs> CopyFolderCompleted;
        
        public event System.EventHandler<CopyFolderItemCompletedEventArgs> CopyFolderItemCompleted;
        
        public event System.EventHandler<CopyFileCompletedEventArgs> CopyFileCompleted;
        
        public event System.EventHandler<CopyFileItemCompletedEventArgs> CopyFileItemCompleted;
        
        public event System.EventHandler<CreateFilePathCompletedEventArgs> CreateFilePathCompleted;
        
        public event System.EventHandler<CreateFolderPathCompletedEventArgs> CreateFolderPathCompleted;
        
        public event System.EventHandler<GetFileSystemRootCompletedEventArgs> GetFileSystemRootCompleted;
        
        public event System.EventHandler<GetFileInfoCompletedEventArgs> GetFileInfoCompleted;
        
        public event System.EventHandler<GetFolderInfoCompletedEventArgs> GetFolderInfoCompleted;
        
        public event System.EventHandler<GetFileParentCompletedEventArgs> GetFileParentCompleted;
        
        public event System.EventHandler<GetFileParentByItemCompletedEventArgs> GetFileParentByItemCompleted;
        
        public event System.EventHandler<GetFolderParentCompletedEventArgs> GetFolderParentCompleted;
        
        public event System.EventHandler<GetFolderParentByItemCompletedEventArgs> GetFolderParentByItemCompleted;
        
        public event System.EventHandler<GetChildFoldersCompletedEventArgs> GetChildFoldersCompleted;
        
        public event System.EventHandler<GetChildFoldersByItemCompletedEventArgs> GetChildFoldersByItemCompleted;
        
        public event System.EventHandler<GetFilteredChildFoldersCompletedEventArgs> GetFilteredChildFoldersCompleted;
        
        public event System.EventHandler<GetFilteredChildFoldersByItemCompletedEventArgs> GetFilteredChildFoldersByItemCompleted;
        
        public event System.EventHandler<GetChildFilesCompletedEventArgs> GetChildFilesCompleted;
        
        public event System.EventHandler<GetChildFilesByItemCompletedEventArgs> GetChildFilesByItemCompleted;
        
        public event System.EventHandler<GetFilteredChildFilesCompletedEventArgs> GetFilteredChildFilesCompleted;
        
        public event System.EventHandler<GetFilteredChildFilesByItemCompletedEventArgs> GetFilteredChildFilesByItemCompleted;
        
        public event System.EventHandler<GetFolderContentsCompletedEventArgs> GetFolderContentsCompleted;
        
        public event System.EventHandler<GetFolderContentsByItemCompletedEventArgs> GetFolderContentsByItemCompleted;
        
        public event System.EventHandler<GetFilteredFolderContentsCompletedEventArgs> GetFilteredFolderContentsCompleted;
        
        public event System.EventHandler<GetFilteredFolderContentsByItemCompletedEventArgs> GetFilteredFolderContentsByItemCompleted;
        
        public event System.EventHandler<IsFileAvailableCompletedEventArgs> IsFileAvailableCompleted;
        
        public event System.EventHandler<IsFolderAvailableCompletedEventArgs> IsFolderAvailableCompleted;
        
        public event System.EventHandler<CreateFolderUnderParentCompletedEventArgs> CreateFolderUnderParentCompleted;
        
        public event System.EventHandler<CreateFolderCompletedEventArgs> CreateFolderCompleted;
        
        public event System.EventHandler<CreateFolderUnderParentItemCompletedEventArgs> CreateFolderUnderParentItemCompleted;
        
        public event System.EventHandler<DeleteFolderCompletedEventArgs> DeleteFolderCompleted;
        
        public event System.EventHandler<DeleteFileCompletedEventArgs> DeleteFileCompleted;
        
        public event System.EventHandler<MoveFolderCompletedEventArgs> MoveFolderCompleted;
        
        public event System.EventHandler<MoveFolderItemCompletedEventArgs> MoveFolderItemCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SLFileBrowser.FileSystemService.IFSOperationService.BeginMoveFile(SLFileBrowser.FileSystemService.MoveFileRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginMoveFile(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SLFileBrowser.FileSystemService.MoveFileResponse SLFileBrowser.FileSystemService.IFSOperationService.EndMoveFile(System.IAsyncResult result) {
            return base.Channel.EndMoveFile(result);
        }
        
        private System.IAsyncResult OnBeginMoveFile(object[] inValues, System.AsyncCallback callback, object asyncState) {
            SLFileBrowser.FileSystemService.MoveFileRequest request = ((SLFileBrowser.FileSystemService.MoveFileRequest)(inValues[0]));
            return ((SLFileBrowser.FileSystemService.IFSOperationService)(this)).BeginMoveFile(request, callback, asyncState);
        }
        
        private object[] OnEndMoveFile(System.IAsyncResult result) {
            SLFileBrowser.FileSystemService.MoveFileResponse retVal = ((SLFileBrowser.FileSystemService.IFSOperationService)(this)).EndMoveFile(result);
            return new object[] {
                    retVal};
        }
        
        private void OnMoveFileCompleted(object state) {
            if ((this.MoveFileCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.MoveFileCompleted(this, new MoveFileCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void MoveFileAsync(SLFileBrowser.FileSystemService.MoveFileRequest request) {
            this.MoveFileAsync(request, null);
        }
        
        public void MoveFileAsync(SLFileBrowser.FileSystemService.MoveFileRequest request, object userState) {
            if ((this.onBeginMoveFileDelegate == null)) {
                this.onBeginMoveFileDelegate = new BeginOperationDelegate(this.OnBeginMoveFile);
            }
            if ((this.onEndMoveFileDelegate == null)) {
                this.onEndMoveFileDelegate = new EndOperationDelegate(this.OnEndMoveFile);
            }
            if ((this.onMoveFileCompletedDelegate == null)) {
                this.onMoveFileCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnMoveFileCompleted);
            }
            base.InvokeAsync(this.onBeginMoveFileDelegate, new object[] {
                        request}, this.onEndMoveFileDelegate, this.onMoveFileCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SLFileBrowser.FileSystemService.IFSOperationService.BeginMoveFileItem(SLFileBrowser.FileSystemService.MoveFileItemRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginMoveFileItem(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SLFileBrowser.FileSystemService.MoveFileItemResponse SLFileBrowser.FileSystemService.IFSOperationService.EndMoveFileItem(System.IAsyncResult result) {
            return base.Channel.EndMoveFileItem(result);
        }
        
        private System.IAsyncResult OnBeginMoveFileItem(object[] inValues, System.AsyncCallback callback, object asyncState) {
            SLFileBrowser.FileSystemService.MoveFileItemRequest request = ((SLFileBrowser.FileSystemService.MoveFileItemRequest)(inValues[0]));
            return ((SLFileBrowser.FileSystemService.IFSOperationService)(this)).BeginMoveFileItem(request, callback, asyncState);
        }
        
        private object[] OnEndMoveFileItem(System.IAsyncResult result) {
            SLFileBrowser.FileSystemService.MoveFileItemResponse retVal = ((SLFileBrowser.FileSystemService.IFSOperationService)(this)).EndMoveFileItem(result);
            return new object[] {
                    retVal};
        }
        
        private void OnMoveFileItemCompleted(object state) {
            if ((this.MoveFileItemCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.MoveFileItemCompleted(this, new MoveFileItemCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void MoveFileItemAsync(SLFileBrowser.FileSystemService.MoveFileItemRequest request) {
            this.MoveFileItemAsync(request, null);
        }
        
        public void MoveFileItemAsync(SLFileBrowser.FileSystemService.MoveFileItemRequest request, object userState) {
            if ((this.onBeginMoveFileItemDelegate == null)) {
                this.onBeginMoveFileItemDelegate = new BeginOperationDelegate(this.OnBeginMoveFileItem);
            }
            if ((this.onEndMoveFileItemDelegate == null)) {
                this.onEndMoveFileItemDelegate = new EndOperationDelegate(this.OnEndMoveFileItem);
            }
            if ((this.onMoveFileItemCompletedDelegate == null)) {
                this.onMoveFileItemCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnMoveFileItemCompleted);
            }
            base.InvokeAsync(this.onBeginMoveFileItemDelegate, new object[] {
                        request}, this.onEndMoveFileItemDelegate, this.onMoveFileItemCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SLFileBrowser.FileSystemService.IFSOperationService.BeginCopyFolder(SLFileBrowser.FileSystemService.CopyFolderRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCopyFolder(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SLFileBrowser.FileSystemService.CopyFolderResponse SLFileBrowser.FileSystemService.IFSOperationService.EndCopyFolder(System.IAsyncResult result) {
            return base.Channel.EndCopyFolder(result);
        }
        
        private System.IAsyncResult OnBeginCopyFolder(object[] inValues, System.AsyncCallback callback, object asyncState) {
            SLFileBrowser.FileSystemService.CopyFolderRequest request = ((SLFileBrowser.FileSystemService.CopyFolderRequest)(inValues[0]));
            return ((SLFileBrowser.FileSystemService.IFSOperationService)(this)).BeginCopyFolder(request, callback, asyncState);
        }
        
        private object[] OnEndCopyFolder(System.IAsyncResult result) {
            SLFileBrowser.FileSystemService.CopyFolderResponse retVal = ((SLFileBrowser.FileSystemService.IFSOperationService)(this)).EndCopyFolder(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCopyFolderCompleted(object state) {
            if ((this.CopyFolderCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CopyFolderCompleted(this, new CopyFolderCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CopyFolderAsync(SLFileBrowser.FileSystemService.CopyFolderRequest request) {
            this.CopyFolderAsync(request, null);
        }
        
        public void CopyFolderAsync(SLFileBrowser.FileSystemService.CopyFolderRequest request, object userState) {
            if ((this.onBeginCopyFolderDelegate == null)) {
                this.onBeginCopyFolderDelegate = new BeginOperationDelegate(this.OnBeginCopyFolder);
            }
            if ((this.onEndCopyFolderDelegate == null)) {
                this.onEndCopyFolderDelegate = new EndOperationDelegate(this.OnEndCopyFolder);
            }
            if ((this.onCopyFolderCompletedDelegate == null)) {
                this.onCopyFolderCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCopyFolderCompleted);
            }
            base.InvokeAsync(this.onBeginCopyFolderDelegate, new object[] {
                        request}, this.onEndCopyFolderDelegate, this.onCopyFolderCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SLFileBrowser.FileSystemService.IFSOperationService.BeginCopyFolderItem(SLFileBrowser.FileSystemService.CopyFolderItemRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCopyFolderItem(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SLFileBrowser.FileSystemService.CopyFolderItemResponse SLFileBrowser.FileSystemService.IFSOperationService.EndCopyFolderItem(System.IAsyncResult result) {
            return base.Channel.EndCopyFolderItem(result);
        }
        
        private System.IAsyncResult OnBeginCopyFolderItem(object[] inValues, System.AsyncCallback callback, object asyncState) {
            SLFileBrowser.FileSystemService.CopyFolderItemRequest request = ((SLFileBrowser.FileSystemService.CopyFolderItemRequest)(inValues[0]));
            return ((SLFileBrowser.FileSystemService.IFSOperationService)(this)).BeginCopyFolderItem(request, callback, asyncState);
        }
        
        private object[] OnEndCopyFolderItem(System.IAsyncResult result) {
            SLFileBrowser.FileSystemService.CopyFolderItemResponse retVal = ((SLFileBrowser.FileSystemService.IFSOperationService)(this)).EndCopyFolderItem(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCopyFolderItemCompleted(object state) {
            if ((this.CopyFolderItemCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CopyFolderItemCompleted(this, new CopyFolderItemCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CopyFolderItemAsync(SLFileBrowser.FileSystemService.CopyFolderItemRequest request) {
            this.CopyFolderItemAsync(request, null);
        }
        
        public void CopyFolderItemAsync(SLFileBrowser.FileSystemService.CopyFolderItemRequest request, object userState) {
            if ((this.onBeginCopyFolderItemDelegate == null)) {
                this.onBeginCopyFolderItemDelegate = new BeginOperationDelegate(this.OnBeginCopyFolderItem);
            }
            if ((this.onEndCopyFolderItemDelegate == null)) {
                this.onEndCopyFolderItemDelegate = new EndOperationDelegate(this.OnEndCopyFolderItem);
            }
            if ((this.onCopyFolderItemCompletedDelegate == null)) {
                this.onCopyFolderItemCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCopyFolderItemCompleted);
            }
            base.InvokeAsync(this.onBeginCopyFolderItemDelegate, new object[] {
                        request}, this.onEndCopyFolderItemDelegate, this.onCopyFolderItemCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SLFileBrowser.FileSystemService.IFSOperationService.BeginCopyFile(SLFileBrowser.FileSystemService.CopyFileRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCopyFile(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SLFileBrowser.FileSystemService.CopyFileResponse SLFileBrowser.FileSystemService.IFSOperationService.EndCopyFile(System.IAsyncResult result) {
            return base.Channel.EndCopyFile(result);
        }
        
        private System.IAsyncResult OnBeginCopyFile(object[] inValues, System.AsyncCallback callback, object asyncState) {
            SLFileBrowser.FileSystemService.CopyFileRequest request = ((SLFileBrowser.FileSystemService.CopyFileRequest)(inValues[0]));
            return ((SLFileBrowser.FileSystemService.IFSOperationService)(this)).BeginCopyFile(request, callback, asyncState);
        }
        
        private object[] OnEndCopyFile(System.IAsyncResult result) {
            SLFileBrowser.FileSystemService.CopyFileResponse retVal = ((SLFileBrowser.FileSystemService.IFSOperationService)(this)).EndCopyFile(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCopyFileCompleted(object state) {
            if ((this.CopyFileCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CopyFileCompleted(this, new CopyFileCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CopyFileAsync(SLFileBrowser.FileSystemService.CopyFileRequest request) {
            this.CopyFileAsync(request, null);
        }
        
        public void CopyFileAsync(SLFileBrowser.FileSystemService.CopyFileRequest request, object userState) {
            if ((this.onBeginCopyFileDelegate == null)) {
                this.onBeginCopyFileDelegate = new BeginOperationDelegate(this.OnBeginCopyFile);
            }
            if ((this.onEndCopyFileDelegate == null)) {
                this.onEndCopyFileDelegate = new EndOperationDelegate(this.OnEndCopyFile);
            }
            if ((this.onCopyFileCompletedDelegate == null)) {
                this.onCopyFileCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCopyFileCompleted);
            }
            base.InvokeAsync(this.onBeginCopyFileDelegate, new object[] {
                        request}, this.onEndCopyFileDelegate, this.onCopyFileCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SLFileBrowser.FileSystemService.IFSOperationService.BeginCopyFileItem(SLFileBrowser.FileSystemService.CopyFileItemRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCopyFileItem(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SLFileBrowser.FileSystemService.CopyFileItemResponse SLFileBrowser.FileSystemService.IFSOperationService.EndCopyFileItem(System.IAsyncResult result) {
            return base.Channel.EndCopyFileItem(result);
        }
        
        private System.IAsyncResult OnBeginCopyFileItem(object[] inValues, System.AsyncCallback callback, object asyncState) {
            SLFileBrowser.FileSystemService.CopyFileItemRequest request = ((SLFileBrowser.FileSystemService.CopyFileItemRequest)(inValues[0]));
            return ((SLFileBrowser.FileSystemService.IFSOperationService)(this)).BeginCopyFileItem(request, callback, asyncState);
        }
        
        private object[] OnEndCopyFileItem(System.IAsyncResult result) {
            SLFileBrowser.FileSystemService.CopyFileItemResponse retVal = ((SLFileBrowser.FileSystemService.IFSOperationService)(this)).EndCopyFileItem(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCopyFileItemCompleted(object state) {
            if ((this.CopyFileItemCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CopyFileItemCompleted(this, new CopyFileItemCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CopyFileItemAsync(SLFileBrowser.FileSystemService.CopyFileItemRequest request) {
            this.CopyFileItemAsync(request, null);
        }
        
        public void CopyFileItemAsync(SLFileBrowser.FileSystemService.CopyFileItemRequest request, object userState) {
            if ((this.onBeginCopyFileItemDelegate == null)) {
                this.onBeginCopyFileItemDelegate = new BeginOperationDelegate(this.OnBeginCopyFileItem);
            }
            if ((this.onEndCopyFileItemDelegate == null)) {
                this.onEndCopyFileItemDelegate = new EndOperationDelegate(this.OnEndCopyFileItem);
            }
            if ((this.onCopyFileItemCompletedDelegate == null)) {
                this.onCopyFileItemCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCopyFileItemCompleted);
            }
            base.InvokeAsync(this.onBeginCopyFileItemDelegate, new object[] {
                        request}, this.onEndCopyFileItemDelegate, this.onCopyFileItemCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SLFileBrowser.FileSystemService.IFSOperationService.BeginCreateFilePath(SLFileBrowser.FileSystemService.CreateFilePathRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCreateFilePath(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SLFileBrowser.FileSystemService.CreateFilePathResponse SLFileBrowser.FileSystemService.IFSOperationService.EndCreateFilePath(System.IAsyncResult result) {
            return base.Channel.EndCreateFilePath(result);
        }
        
        private System.IAsyncResult OnBeginCreateFilePath(object[] inValues, System.AsyncCallback callback, object asyncState) {
            SLFileBrowser.FileSystemService.CreateFilePathRequest request = ((SLFileBrowser.FileSystemService.CreateFilePathRequest)(inValues[0]));
            return ((SLFileBrowser.FileSystemService.IFSOperationService)(this)).BeginCreateFilePath(request, callback, asyncState);
        }
        
        private object[] OnEndCreateFilePath(System.IAsyncResult result) {
            SLFileBrowser.FileSystemService.CreateFilePathResponse retVal = ((SLFileBrowser.FileSystemService.IFSOperationService)(this)).EndCreateFilePath(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCreateFilePathCompleted(object state) {
            if ((this.CreateFilePathCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CreateFilePathCompleted(this, new CreateFilePathCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CreateFilePathAsync(SLFileBrowser.FileSystemService.CreateFilePathRequest request) {
            this.CreateFilePathAsync(request, null);
        }
        
        public void CreateFilePathAsync(SLFileBrowser.FileSystemService.CreateFilePathRequest request, object userState) {
            if ((this.onBeginCreateFilePathDelegate == null)) {
                this.onBeginCreateFilePathDelegate = new BeginOperationDelegate(this.OnBeginCreateFilePath);
            }
            if ((this.onEndCreateFilePathDelegate == null)) {
                this.onEndCreateFilePathDelegate = new EndOperationDelegate(this.OnEndCreateFilePath);
            }
            if ((this.onCreateFilePathCompletedDelegate == null)) {
                this.onCreateFilePathCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCreateFilePathCompleted);
            }
            base.InvokeAsync(this.onBeginCreateFilePathDelegate, new object[] {
                        request}, this.onEndCreateFilePathDelegate, this.onCreateFilePathCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SLFileBrowser.FileSystemService.IFSOperationService.BeginCreateFolderPath(SLFileBrowser.FileSystemService.CreateFolderPathRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCreateFolderPath(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SLFileBrowser.FileSystemService.CreateFolderPathResponse SLFileBrowser.FileSystemService.IFSOperationService.EndCreateFolderPath(System.IAsyncResult result) {
            return base.Channel.EndCreateFolderPath(result);
        }
        
        private System.IAsyncResult OnBeginCreateFolderPath(object[] inValues, System.AsyncCallback callback, object asyncState) {
            SLFileBrowser.FileSystemService.CreateFolderPathRequest request = ((SLFileBrowser.FileSystemService.CreateFolderPathRequest)(inValues[0]));
            return ((SLFileBrowser.FileSystemService.IFSOperationService)(this)).BeginCreateFolderPath(request, callback, asyncState);
        }
        
        private object[] OnEndCreateFolderPath(System.IAsyncResult result) {
            SLFileBrowser.FileSystemService.CreateFolderPathResponse retVal = ((SLFileBrowser.FileSystemService.IFSOperationService)(this)).EndCreateFolderPath(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCreateFolderPathCompleted(object state) {
            if ((this.CreateFolderPathCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CreateFolderPathCompleted(this, new CreateFolderPathCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CreateFolderPathAsync(SLFileBrowser.FileSystemService.CreateFolderPathRequest request) {
            this.CreateFolderPathAsync(request, null);
        }
        
        public void CreateFolderPathAsync(SLFileBrowser.FileSystemService.CreateFolderPathRequest request, object userState) {
            if ((this.onBeginCreateFolderPathDelegate == null)) {
                this.onBeginCreateFolderPathDelegate = new BeginOperationDelegate(this.OnBeginCreateFolderPath);
            }
            if ((this.onEndCreateFolderPathDelegate == null)) {
                this.onEndCreateFolderPathDelegate = new EndOperationDelegate(this.OnEndCreateFolderPath);
            }
            if ((this.onCreateFolderPathCompletedDelegate == null)) {
                this.onCreateFolderPathCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCreateFolderPathCompleted);
            }
            base.InvokeAsync(this.onBeginCreateFolderPathDelegate, new object[] {
                        request}, this.onEndCreateFolderPathDelegate, this.onCreateFolderPathCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SLFileBrowser.FileSystemService.IFSOperationService.BeginGetFileSystemRoot(SLFileBrowser.FileSystemService.GetFileSystemRootRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetFileSystemRoot(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SLFileBrowser.FileSystemService.GetFileSystemRootResponse SLFileBrowser.FileSystemService.IFSOperationService.EndGetFileSystemRoot(System.IAsyncResult result) {
            return base.Channel.EndGetFileSystemRoot(result);
        }
        
        private System.IAsyncResult OnBeginGetFileSystemRoot(object[] inValues, System.AsyncCallback callback, object asyncState) {
            SLFileBrowser.FileSystemService.GetFileSystemRootRequest request = ((SLFileBrowser.FileSystemService.GetFileSystemRootRequest)(inValues[0]));
            return ((SLFileBrowser.FileSystemService.IFSOperationService)(this)).BeginGetFileSystemRoot(request, callback, asyncState);
        }
        
        private object[] OnEndGetFileSystemRoot(System.IAsyncResult result) {
            SLFileBrowser.FileSystemService.GetFileSystemRootResponse retVal = ((SLFileBrowser.FileSystemService.IFSOperationService)(this)).EndGetFileSystemRoot(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetFileSystemRootCompleted(object state) {
            if ((this.GetFileSystemRootCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFileSystemRootCompleted(this, new GetFileSystemRootCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFileSystemRootAsync(SLFileBrowser.FileSystemService.GetFileSystemRootRequest request) {
            this.GetFileSystemRootAsync(request, null);
        }
        
        public void GetFileSystemRootAsync(SLFileBrowser.FileSystemService.GetFileSystemRootRequest request, object userState) {
            if ((this.onBeginGetFileSystemRootDelegate == null)) {
                this.onBeginGetFileSystemRootDelegate = new BeginOperationDelegate(this.OnBeginGetFileSystemRoot);
            }
            if ((this.onEndGetFileSystemRootDelegate == null)) {
                this.onEndGetFileSystemRootDelegate = new EndOperationDelegate(this.OnEndGetFileSystemRoot);
            }
            if ((this.onGetFileSystemRootCompletedDelegate == null)) {
                this.onGetFileSystemRootCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFileSystemRootCompleted);
            }
            base.InvokeAsync(this.onBeginGetFileSystemRootDelegate, new object[] {
                        request}, this.onEndGetFileSystemRootDelegate, this.onGetFileSystemRootCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SLFileBrowser.FileSystemService.IFSOperationService.BeginGetFileInfo(SLFileBrowser.FileSystemService.GetFileInfoRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetFileInfo(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SLFileBrowser.FileSystemService.GetFileInfoResponse SLFileBrowser.FileSystemService.IFSOperationService.EndGetFileInfo(System.IAsyncResult result) {
            return base.Channel.EndGetFileInfo(result);
        }
        
        private System.IAsyncResult OnBeginGetFileInfo(object[] inValues, System.AsyncCallback callback, object asyncState) {
            SLFileBrowser.FileSystemService.GetFileInfoRequest request = ((SLFileBrowser.FileSystemService.GetFileInfoRequest)(inValues[0]));
            return ((SLFileBrowser.FileSystemService.IFSOperationService)(this)).BeginGetFileInfo(request, callback, asyncState);
        }
        
        private object[] OnEndGetFileInfo(System.IAsyncResult result) {
            SLFileBrowser.FileSystemService.GetFileInfoResponse retVal = ((SLFileBrowser.FileSystemService.IFSOperationService)(this)).EndGetFileInfo(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetFileInfoCompleted(object state) {
            if ((this.GetFileInfoCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFileInfoCompleted(this, new GetFileInfoCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFileInfoAsync(SLFileBrowser.FileSystemService.GetFileInfoRequest request) {
            this.GetFileInfoAsync(request, null);
        }
        
        public void GetFileInfoAsync(SLFileBrowser.FileSystemService.GetFileInfoRequest request, object userState) {
            if ((this.onBeginGetFileInfoDelegate == null)) {
                this.onBeginGetFileInfoDelegate = new BeginOperationDelegate(this.OnBeginGetFileInfo);
            }
            if ((this.onEndGetFileInfoDelegate == null)) {
                this.onEndGetFileInfoDelegate = new EndOperationDelegate(this.OnEndGetFileInfo);
            }
            if ((this.onGetFileInfoCompletedDelegate == null)) {
                this.onGetFileInfoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFileInfoCompleted);
            }
            base.InvokeAsync(this.onBeginGetFileInfoDelegate, new object[] {
                        request}, this.onEndGetFileInfoDelegate, this.onGetFileInfoCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SLFileBrowser.FileSystemService.IFSOperationService.BeginGetFolderInfo(SLFileBrowser.FileSystemService.GetFolderInfoRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetFolderInfo(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SLFileBrowser.FileSystemService.GetFolderInfoResponse SLFileBrowser.FileSystemService.IFSOperationService.EndGetFolderInfo(System.IAsyncResult result) {
            return base.Channel.EndGetFolderInfo(result);
        }
        
        private System.IAsyncResult OnBeginGetFolderInfo(object[] inValues, System.AsyncCallback callback, object asyncState) {
            SLFileBrowser.FileSystemService.GetFolderInfoRequest request = ((SLFileBrowser.FileSystemService.GetFolderInfoRequest)(inValues[0]));
            return ((SLFileBrowser.FileSystemService.IFSOperationService)(this)).BeginGetFolderInfo(request, callback, asyncState);
        }
        
        private object[] OnEndGetFolderInfo(System.IAsyncResult result) {
            SLFileBrowser.FileSystemService.GetFolderInfoResponse retVal = ((SLFileBrowser.FileSystemService.IFSOperationService)(this)).EndGetFolderInfo(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetFolderInfoCompleted(object state) {
            if ((this.GetFolderInfoCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFolderInfoCompleted(this, new GetFolderInfoCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFolderInfoAsync(SLFileBrowser.FileSystemService.GetFolderInfoRequest request) {
            this.GetFolderInfoAsync(request, null);
        }
        
        public void GetFolderInfoAsync(SLFileBrowser.FileSystemService.GetFolderInfoRequest request, object userState) {
            if ((this.onBeginGetFolderInfoDelegate == null)) {
                this.onBeginGetFolderInfoDelegate = new BeginOperationDelegate(this.OnBeginGetFolderInfo);
            }
            if ((this.onEndGetFolderInfoDelegate == null)) {
                this.onEndGetFolderInfoDelegate = new EndOperationDelegate(this.OnEndGetFolderInfo);
            }
            if ((this.onGetFolderInfoCompletedDelegate == null)) {
                this.onGetFolderInfoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFolderInfoCompleted);
            }
            base.InvokeAsync(this.onBeginGetFolderInfoDelegate, new object[] {
                        request}, this.onEndGetFolderInfoDelegate, this.onGetFolderInfoCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SLFileBrowser.FileSystemService.IFSOperationService.BeginGetFileParent(SLFileBrowser.FileSystemService.GetFileParentRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetFileParent(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SLFileBrowser.FileSystemService.GetFileParentResponse SLFileBrowser.FileSystemService.IFSOperationService.EndGetFileParent(System.IAsyncResult result) {
            return base.Channel.EndGetFileParent(result);
        }
        
        private System.IAsyncResult OnBeginGetFileParent(object[] inValues, System.AsyncCallback callback, object asyncState) {
            SLFileBrowser.FileSystemService.GetFileParentRequest request = ((SLFileBrowser.FileSystemService.GetFileParentRequest)(inValues[0]));
            return ((SLFileBrowser.FileSystemService.IFSOperationService)(this)).BeginGetFileParent(request, callback, asyncState);
        }
        
        private object[] OnEndGetFileParent(System.IAsyncResult result) {
            SLFileBrowser.FileSystemService.GetFileParentResponse retVal = ((SLFileBrowser.FileSystemService.IFSOperationService)(this)).EndGetFileParent(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetFileParentCompleted(object state) {
            if ((this.GetFileParentCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFileParentCompleted(this, new GetFileParentCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFileParentAsync(SLFileBrowser.FileSystemService.GetFileParentRequest request) {
            this.GetFileParentAsync(request, null);
        }
        
        public void GetFileParentAsync(SLFileBrowser.FileSystemService.GetFileParentRequest request, object userState) {
            if ((this.onBeginGetFileParentDelegate == null)) {
                this.onBeginGetFileParentDelegate = new BeginOperationDelegate(this.OnBeginGetFileParent);
            }
            if ((this.onEndGetFileParentDelegate == null)) {
                this.onEndGetFileParentDelegate = new EndOperationDelegate(this.OnEndGetFileParent);
            }
            if ((this.onGetFileParentCompletedDelegate == null)) {
                this.onGetFileParentCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFileParentCompleted);
            }
            base.InvokeAsync(this.onBeginGetFileParentDelegate, new object[] {
                        request}, this.onEndGetFileParentDelegate, this.onGetFileParentCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SLFileBrowser.FileSystemService.IFSOperationService.BeginGetFileParentByItem(SLFileBrowser.FileSystemService.GetFileParentByItemRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetFileParentByItem(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SLFileBrowser.FileSystemService.GetFileParentByItemResponse SLFileBrowser.FileSystemService.IFSOperationService.EndGetFileParentByItem(System.IAsyncResult result) {
            return base.Channel.EndGetFileParentByItem(result);
        }
        
        private System.IAsyncResult OnBeginGetFileParentByItem(object[] inValues, System.AsyncCallback callback, object asyncState) {
            SLFileBrowser.FileSystemService.GetFileParentByItemRequest request = ((SLFileBrowser.FileSystemService.GetFileParentByItemRequest)(inValues[0]));
            return ((SLFileBrowser.FileSystemService.IFSOperationService)(this)).BeginGetFileParentByItem(request, callback, asyncState);
        }
        
        private object[] OnEndGetFileParentByItem(System.IAsyncResult result) {
            SLFileBrowser.FileSystemService.GetFileParentByItemResponse retVal = ((SLFileBrowser.FileSystemService.IFSOperationService)(this)).EndGetFileParentByItem(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetFileParentByItemCompleted(object state) {
            if ((this.GetFileParentByItemCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFileParentByItemCompleted(this, new GetFileParentByItemCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFileParentByItemAsync(SLFileBrowser.FileSystemService.GetFileParentByItemRequest request) {
            this.GetFileParentByItemAsync(request, null);
        }
        
        public void GetFileParentByItemAsync(SLFileBrowser.FileSystemService.GetFileParentByItemRequest request, object userState) {
            if ((this.onBeginGetFileParentByItemDelegate == null)) {
                this.onBeginGetFileParentByItemDelegate = new BeginOperationDelegate(this.OnBeginGetFileParentByItem);
            }
            if ((this.onEndGetFileParentByItemDelegate == null)) {
                this.onEndGetFileParentByItemDelegate = new EndOperationDelegate(this.OnEndGetFileParentByItem);
            }
            if ((this.onGetFileParentByItemCompletedDelegate == null)) {
                this.onGetFileParentByItemCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFileParentByItemCompleted);
            }
            base.InvokeAsync(this.onBeginGetFileParentByItemDelegate, new object[] {
                        request}, this.onEndGetFileParentByItemDelegate, this.onGetFileParentByItemCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SLFileBrowser.FileSystemService.IFSOperationService.BeginGetFolderParent(SLFileBrowser.FileSystemService.GetFolderParentRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetFolderParent(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SLFileBrowser.FileSystemService.GetFolderParentResponse SLFileBrowser.FileSystemService.IFSOperationService.EndGetFolderParent(System.IAsyncResult result) {
            return base.Channel.EndGetFolderParent(result);
        }
        
        private System.IAsyncResult OnBeginGetFolderParent(object[] inValues, System.AsyncCallback callback, object asyncState) {
            SLFileBrowser.FileSystemService.GetFolderParentRequest request = ((SLFileBrowser.FileSystemService.GetFolderParentRequest)(inValues[0]));
            return ((SLFileBrowser.FileSystemService.IFSOperationService)(this)).BeginGetFolderParent(request, callback, asyncState);
        }
        
        private object[] OnEndGetFolderParent(System.IAsyncResult result) {
            SLFileBrowser.FileSystemService.GetFolderParentResponse retVal = ((SLFileBrowser.FileSystemService.IFSOperationService)(this)).EndGetFolderParent(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetFolderParentCompleted(object state) {
            if ((this.GetFolderParentCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFolderParentCompleted(this, new GetFolderParentCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFolderParentAsync(SLFileBrowser.FileSystemService.GetFolderParentRequest request) {
            this.GetFolderParentAsync(request, null);
        }
        
        public void GetFolderParentAsync(SLFileBrowser.FileSystemService.GetFolderParentRequest request, object userState) {
            if ((this.onBeginGetFolderParentDelegate == null)) {
                this.onBeginGetFolderParentDelegate = new BeginOperationDelegate(this.OnBeginGetFolderParent);
            }
            if ((this.onEndGetFolderParentDelegate == null)) {
                this.onEndGetFolderParentDelegate = new EndOperationDelegate(this.OnEndGetFolderParent);
            }
            if ((this.onGetFolderParentCompletedDelegate == null)) {
                this.onGetFolderParentCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFolderParentCompleted);
            }
            base.InvokeAsync(this.onBeginGetFolderParentDelegate, new object[] {
                        request}, this.onEndGetFolderParentDelegate, this.onGetFolderParentCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SLFileBrowser.FileSystemService.IFSOperationService.BeginGetFolderParentByItem(SLFileBrowser.FileSystemService.GetFolderParentByItemRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetFolderParentByItem(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SLFileBrowser.FileSystemService.GetFolderParentByItemResponse SLFileBrowser.FileSystemService.IFSOperationService.EndGetFolderParentByItem(System.IAsyncResult result) {
            return base.Channel.EndGetFolderParentByItem(result);
        }
        
        private System.IAsyncResult OnBeginGetFolderParentByItem(object[] inValues, System.AsyncCallback callback, object asyncState) {
            SLFileBrowser.FileSystemService.GetFolderParentByItemRequest request = ((SLFileBrowser.FileSystemService.GetFolderParentByItemRequest)(inValues[0]));
            return ((SLFileBrowser.FileSystemService.IFSOperationService)(this)).BeginGetFolderParentByItem(request, callback, asyncState);
        }
        
        private object[] OnEndGetFolderParentByItem(System.IAsyncResult result) {
            SLFileBrowser.FileSystemService.GetFolderParentByItemResponse retVal = ((SLFileBrowser.FileSystemService.IFSOperationService)(this)).EndGetFolderParentByItem(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetFolderParentByItemCompleted(object state) {
            if ((this.GetFolderParentByItemCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFolderParentByItemCompleted(this, new GetFolderParentByItemCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFolderParentByItemAsync(SLFileBrowser.FileSystemService.GetFolderParentByItemRequest request) {
            this.GetFolderParentByItemAsync(request, null);
        }
        
        public void GetFolderParentByItemAsync(SLFileBrowser.FileSystemService.GetFolderParentByItemRequest request, object userState) {
            if ((this.onBeginGetFolderParentByItemDelegate == null)) {
                this.onBeginGetFolderParentByItemDelegate = new BeginOperationDelegate(this.OnBeginGetFolderParentByItem);
            }
            if ((this.onEndGetFolderParentByItemDelegate == null)) {
                this.onEndGetFolderParentByItemDelegate = new EndOperationDelegate(this.OnEndGetFolderParentByItem);
            }
            if ((this.onGetFolderParentByItemCompletedDelegate == null)) {
                this.onGetFolderParentByItemCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFolderParentByItemCompleted);
            }
            base.InvokeAsync(this.onBeginGetFolderParentByItemDelegate, new object[] {
                        request}, this.onEndGetFolderParentByItemDelegate, this.onGetFolderParentByItemCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SLFileBrowser.FileSystemService.IFSOperationService.BeginGetChildFolders(SLFileBrowser.FileSystemService.GetChildFoldersRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetChildFolders(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SLFileBrowser.FileSystemService.GetChildFoldersResponse SLFileBrowser.FileSystemService.IFSOperationService.EndGetChildFolders(System.IAsyncResult result) {
            return base.Channel.EndGetChildFolders(result);
        }
        
        private System.IAsyncResult OnBeginGetChildFolders(object[] inValues, System.AsyncCallback callback, object asyncState) {
            SLFileBrowser.FileSystemService.GetChildFoldersRequest request = ((SLFileBrowser.FileSystemService.GetChildFoldersRequest)(inValues[0]));
            return ((SLFileBrowser.FileSystemService.IFSOperationService)(this)).BeginGetChildFolders(request, callback, asyncState);
        }
        
        private object[] OnEndGetChildFolders(System.IAsyncResult result) {
            SLFileBrowser.FileSystemService.GetChildFoldersResponse retVal = ((SLFileBrowser.FileSystemService.IFSOperationService)(this)).EndGetChildFolders(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetChildFoldersCompleted(object state) {
            if ((this.GetChildFoldersCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetChildFoldersCompleted(this, new GetChildFoldersCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetChildFoldersAsync(SLFileBrowser.FileSystemService.GetChildFoldersRequest request) {
            this.GetChildFoldersAsync(request, null);
        }
        
        public void GetChildFoldersAsync(SLFileBrowser.FileSystemService.GetChildFoldersRequest request, object userState) {
            if ((this.onBeginGetChildFoldersDelegate == null)) {
                this.onBeginGetChildFoldersDelegate = new BeginOperationDelegate(this.OnBeginGetChildFolders);
            }
            if ((this.onEndGetChildFoldersDelegate == null)) {
                this.onEndGetChildFoldersDelegate = new EndOperationDelegate(this.OnEndGetChildFolders);
            }
            if ((this.onGetChildFoldersCompletedDelegate == null)) {
                this.onGetChildFoldersCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetChildFoldersCompleted);
            }
            base.InvokeAsync(this.onBeginGetChildFoldersDelegate, new object[] {
                        request}, this.onEndGetChildFoldersDelegate, this.onGetChildFoldersCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SLFileBrowser.FileSystemService.IFSOperationService.BeginGetChildFoldersByItem(SLFileBrowser.FileSystemService.GetChildFoldersByItemRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetChildFoldersByItem(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SLFileBrowser.FileSystemService.GetChildFoldersByItemResponse SLFileBrowser.FileSystemService.IFSOperationService.EndGetChildFoldersByItem(System.IAsyncResult result) {
            return base.Channel.EndGetChildFoldersByItem(result);
        }
        
        private System.IAsyncResult OnBeginGetChildFoldersByItem(object[] inValues, System.AsyncCallback callback, object asyncState) {
            SLFileBrowser.FileSystemService.GetChildFoldersByItemRequest request = ((SLFileBrowser.FileSystemService.GetChildFoldersByItemRequest)(inValues[0]));
            return ((SLFileBrowser.FileSystemService.IFSOperationService)(this)).BeginGetChildFoldersByItem(request, callback, asyncState);
        }
        
        private object[] OnEndGetChildFoldersByItem(System.IAsyncResult result) {
            SLFileBrowser.FileSystemService.GetChildFoldersByItemResponse retVal = ((SLFileBrowser.FileSystemService.IFSOperationService)(this)).EndGetChildFoldersByItem(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetChildFoldersByItemCompleted(object state) {
            if ((this.GetChildFoldersByItemCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetChildFoldersByItemCompleted(this, new GetChildFoldersByItemCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetChildFoldersByItemAsync(SLFileBrowser.FileSystemService.GetChildFoldersByItemRequest request) {
            this.GetChildFoldersByItemAsync(request, null);
        }
        
        public void GetChildFoldersByItemAsync(SLFileBrowser.FileSystemService.GetChildFoldersByItemRequest request, object userState) {
            if ((this.onBeginGetChildFoldersByItemDelegate == null)) {
                this.onBeginGetChildFoldersByItemDelegate = new BeginOperationDelegate(this.OnBeginGetChildFoldersByItem);
            }
            if ((this.onEndGetChildFoldersByItemDelegate == null)) {
                this.onEndGetChildFoldersByItemDelegate = new EndOperationDelegate(this.OnEndGetChildFoldersByItem);
            }
            if ((this.onGetChildFoldersByItemCompletedDelegate == null)) {
                this.onGetChildFoldersByItemCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetChildFoldersByItemCompleted);
            }
            base.InvokeAsync(this.onBeginGetChildFoldersByItemDelegate, new object[] {
                        request}, this.onEndGetChildFoldersByItemDelegate, this.onGetChildFoldersByItemCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SLFileBrowser.FileSystemService.IFSOperationService.BeginGetFilteredChildFolders(SLFileBrowser.FileSystemService.GetFilteredChildFoldersRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetFilteredChildFolders(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SLFileBrowser.FileSystemService.GetFilteredChildFoldersResponse SLFileBrowser.FileSystemService.IFSOperationService.EndGetFilteredChildFolders(System.IAsyncResult result) {
            return base.Channel.EndGetFilteredChildFolders(result);
        }
        
        private System.IAsyncResult OnBeginGetFilteredChildFolders(object[] inValues, System.AsyncCallback callback, object asyncState) {
            SLFileBrowser.FileSystemService.GetFilteredChildFoldersRequest request = ((SLFileBrowser.FileSystemService.GetFilteredChildFoldersRequest)(inValues[0]));
            return ((SLFileBrowser.FileSystemService.IFSOperationService)(this)).BeginGetFilteredChildFolders(request, callback, asyncState);
        }
        
        private object[] OnEndGetFilteredChildFolders(System.IAsyncResult result) {
            SLFileBrowser.FileSystemService.GetFilteredChildFoldersResponse retVal = ((SLFileBrowser.FileSystemService.IFSOperationService)(this)).EndGetFilteredChildFolders(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetFilteredChildFoldersCompleted(object state) {
            if ((this.GetFilteredChildFoldersCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFilteredChildFoldersCompleted(this, new GetFilteredChildFoldersCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFilteredChildFoldersAsync(SLFileBrowser.FileSystemService.GetFilteredChildFoldersRequest request) {
            this.GetFilteredChildFoldersAsync(request, null);
        }
        
        public void GetFilteredChildFoldersAsync(SLFileBrowser.FileSystemService.GetFilteredChildFoldersRequest request, object userState) {
            if ((this.onBeginGetFilteredChildFoldersDelegate == null)) {
                this.onBeginGetFilteredChildFoldersDelegate = new BeginOperationDelegate(this.OnBeginGetFilteredChildFolders);
            }
            if ((this.onEndGetFilteredChildFoldersDelegate == null)) {
                this.onEndGetFilteredChildFoldersDelegate = new EndOperationDelegate(this.OnEndGetFilteredChildFolders);
            }
            if ((this.onGetFilteredChildFoldersCompletedDelegate == null)) {
                this.onGetFilteredChildFoldersCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFilteredChildFoldersCompleted);
            }
            base.InvokeAsync(this.onBeginGetFilteredChildFoldersDelegate, new object[] {
                        request}, this.onEndGetFilteredChildFoldersDelegate, this.onGetFilteredChildFoldersCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SLFileBrowser.FileSystemService.IFSOperationService.BeginGetFilteredChildFoldersByItem(SLFileBrowser.FileSystemService.GetFilteredChildFoldersByItemRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetFilteredChildFoldersByItem(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SLFileBrowser.FileSystemService.GetFilteredChildFoldersByItemResponse SLFileBrowser.FileSystemService.IFSOperationService.EndGetFilteredChildFoldersByItem(System.IAsyncResult result) {
            return base.Channel.EndGetFilteredChildFoldersByItem(result);
        }
        
        private System.IAsyncResult OnBeginGetFilteredChildFoldersByItem(object[] inValues, System.AsyncCallback callback, object asyncState) {
            SLFileBrowser.FileSystemService.GetFilteredChildFoldersByItemRequest request = ((SLFileBrowser.FileSystemService.GetFilteredChildFoldersByItemRequest)(inValues[0]));
            return ((SLFileBrowser.FileSystemService.IFSOperationService)(this)).BeginGetFilteredChildFoldersByItem(request, callback, asyncState);
        }
        
        private object[] OnEndGetFilteredChildFoldersByItem(System.IAsyncResult result) {
            SLFileBrowser.FileSystemService.GetFilteredChildFoldersByItemResponse retVal = ((SLFileBrowser.FileSystemService.IFSOperationService)(this)).EndGetFilteredChildFoldersByItem(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetFilteredChildFoldersByItemCompleted(object state) {
            if ((this.GetFilteredChildFoldersByItemCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFilteredChildFoldersByItemCompleted(this, new GetFilteredChildFoldersByItemCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFilteredChildFoldersByItemAsync(SLFileBrowser.FileSystemService.GetFilteredChildFoldersByItemRequest request) {
            this.GetFilteredChildFoldersByItemAsync(request, null);
        }
        
        public void GetFilteredChildFoldersByItemAsync(SLFileBrowser.FileSystemService.GetFilteredChildFoldersByItemRequest request, object userState) {
            if ((this.onBeginGetFilteredChildFoldersByItemDelegate == null)) {
                this.onBeginGetFilteredChildFoldersByItemDelegate = new BeginOperationDelegate(this.OnBeginGetFilteredChildFoldersByItem);
            }
            if ((this.onEndGetFilteredChildFoldersByItemDelegate == null)) {
                this.onEndGetFilteredChildFoldersByItemDelegate = new EndOperationDelegate(this.OnEndGetFilteredChildFoldersByItem);
            }
            if ((this.onGetFilteredChildFoldersByItemCompletedDelegate == null)) {
                this.onGetFilteredChildFoldersByItemCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFilteredChildFoldersByItemCompleted);
            }
            base.InvokeAsync(this.onBeginGetFilteredChildFoldersByItemDelegate, new object[] {
                        request}, this.onEndGetFilteredChildFoldersByItemDelegate, this.onGetFilteredChildFoldersByItemCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SLFileBrowser.FileSystemService.IFSOperationService.BeginGetChildFiles(SLFileBrowser.FileSystemService.GetChildFilesRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetChildFiles(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SLFileBrowser.FileSystemService.GetChildFilesResponse SLFileBrowser.FileSystemService.IFSOperationService.EndGetChildFiles(System.IAsyncResult result) {
            return base.Channel.EndGetChildFiles(result);
        }
        
        private System.IAsyncResult OnBeginGetChildFiles(object[] inValues, System.AsyncCallback callback, object asyncState) {
            SLFileBrowser.FileSystemService.GetChildFilesRequest request = ((SLFileBrowser.FileSystemService.GetChildFilesRequest)(inValues[0]));
            return ((SLFileBrowser.FileSystemService.IFSOperationService)(this)).BeginGetChildFiles(request, callback, asyncState);
        }
        
        private object[] OnEndGetChildFiles(System.IAsyncResult result) {
            SLFileBrowser.FileSystemService.GetChildFilesResponse retVal = ((SLFileBrowser.FileSystemService.IFSOperationService)(this)).EndGetChildFiles(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetChildFilesCompleted(object state) {
            if ((this.GetChildFilesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetChildFilesCompleted(this, new GetChildFilesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetChildFilesAsync(SLFileBrowser.FileSystemService.GetChildFilesRequest request) {
            this.GetChildFilesAsync(request, null);
        }
        
        public void GetChildFilesAsync(SLFileBrowser.FileSystemService.GetChildFilesRequest request, object userState) {
            if ((this.onBeginGetChildFilesDelegate == null)) {
                this.onBeginGetChildFilesDelegate = new BeginOperationDelegate(this.OnBeginGetChildFiles);
            }
            if ((this.onEndGetChildFilesDelegate == null)) {
                this.onEndGetChildFilesDelegate = new EndOperationDelegate(this.OnEndGetChildFiles);
            }
            if ((this.onGetChildFilesCompletedDelegate == null)) {
                this.onGetChildFilesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetChildFilesCompleted);
            }
            base.InvokeAsync(this.onBeginGetChildFilesDelegate, new object[] {
                        request}, this.onEndGetChildFilesDelegate, this.onGetChildFilesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SLFileBrowser.FileSystemService.IFSOperationService.BeginGetChildFilesByItem(SLFileBrowser.FileSystemService.GetChildFilesByItemRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetChildFilesByItem(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SLFileBrowser.FileSystemService.GetChildFilesByItemResponse SLFileBrowser.FileSystemService.IFSOperationService.EndGetChildFilesByItem(System.IAsyncResult result) {
            return base.Channel.EndGetChildFilesByItem(result);
        }
        
        private System.IAsyncResult OnBeginGetChildFilesByItem(object[] inValues, System.AsyncCallback callback, object asyncState) {
            SLFileBrowser.FileSystemService.GetChildFilesByItemRequest request = ((SLFileBrowser.FileSystemService.GetChildFilesByItemRequest)(inValues[0]));
            return ((SLFileBrowser.FileSystemService.IFSOperationService)(this)).BeginGetChildFilesByItem(request, callback, asyncState);
        }
        
        private object[] OnEndGetChildFilesByItem(System.IAsyncResult result) {
            SLFileBrowser.FileSystemService.GetChildFilesByItemResponse retVal = ((SLFileBrowser.FileSystemService.IFSOperationService)(this)).EndGetChildFilesByItem(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetChildFilesByItemCompleted(object state) {
            if ((this.GetChildFilesByItemCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetChildFilesByItemCompleted(this, new GetChildFilesByItemCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetChildFilesByItemAsync(SLFileBrowser.FileSystemService.GetChildFilesByItemRequest request) {
            this.GetChildFilesByItemAsync(request, null);
        }
        
        public void GetChildFilesByItemAsync(SLFileBrowser.FileSystemService.GetChildFilesByItemRequest request, object userState) {
            if ((this.onBeginGetChildFilesByItemDelegate == null)) {
                this.onBeginGetChildFilesByItemDelegate = new BeginOperationDelegate(this.OnBeginGetChildFilesByItem);
            }
            if ((this.onEndGetChildFilesByItemDelegate == null)) {
                this.onEndGetChildFilesByItemDelegate = new EndOperationDelegate(this.OnEndGetChildFilesByItem);
            }
            if ((this.onGetChildFilesByItemCompletedDelegate == null)) {
                this.onGetChildFilesByItemCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetChildFilesByItemCompleted);
            }
            base.InvokeAsync(this.onBeginGetChildFilesByItemDelegate, new object[] {
                        request}, this.onEndGetChildFilesByItemDelegate, this.onGetChildFilesByItemCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SLFileBrowser.FileSystemService.IFSOperationService.BeginGetFilteredChildFiles(SLFileBrowser.FileSystemService.GetFilteredChildFilesRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetFilteredChildFiles(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SLFileBrowser.FileSystemService.GetFilteredChildFilesResponse SLFileBrowser.FileSystemService.IFSOperationService.EndGetFilteredChildFiles(System.IAsyncResult result) {
            return base.Channel.EndGetFilteredChildFiles(result);
        }
        
        private System.IAsyncResult OnBeginGetFilteredChildFiles(object[] inValues, System.AsyncCallback callback, object asyncState) {
            SLFileBrowser.FileSystemService.GetFilteredChildFilesRequest request = ((SLFileBrowser.FileSystemService.GetFilteredChildFilesRequest)(inValues[0]));
            return ((SLFileBrowser.FileSystemService.IFSOperationService)(this)).BeginGetFilteredChildFiles(request, callback, asyncState);
        }
        
        private object[] OnEndGetFilteredChildFiles(System.IAsyncResult result) {
            SLFileBrowser.FileSystemService.GetFilteredChildFilesResponse retVal = ((SLFileBrowser.FileSystemService.IFSOperationService)(this)).EndGetFilteredChildFiles(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetFilteredChildFilesCompleted(object state) {
            if ((this.GetFilteredChildFilesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFilteredChildFilesCompleted(this, new GetFilteredChildFilesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFilteredChildFilesAsync(SLFileBrowser.FileSystemService.GetFilteredChildFilesRequest request) {
            this.GetFilteredChildFilesAsync(request, null);
        }
        
        public void GetFilteredChildFilesAsync(SLFileBrowser.FileSystemService.GetFilteredChildFilesRequest request, object userState) {
            if ((this.onBeginGetFilteredChildFilesDelegate == null)) {
                this.onBeginGetFilteredChildFilesDelegate = new BeginOperationDelegate(this.OnBeginGetFilteredChildFiles);
            }
            if ((this.onEndGetFilteredChildFilesDelegate == null)) {
                this.onEndGetFilteredChildFilesDelegate = new EndOperationDelegate(this.OnEndGetFilteredChildFiles);
            }
            if ((this.onGetFilteredChildFilesCompletedDelegate == null)) {
                this.onGetFilteredChildFilesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFilteredChildFilesCompleted);
            }
            base.InvokeAsync(this.onBeginGetFilteredChildFilesDelegate, new object[] {
                        request}, this.onEndGetFilteredChildFilesDelegate, this.onGetFilteredChildFilesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SLFileBrowser.FileSystemService.IFSOperationService.BeginGetFilteredChildFilesByItem(SLFileBrowser.FileSystemService.GetFilteredChildFilesByItemRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetFilteredChildFilesByItem(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SLFileBrowser.FileSystemService.GetFilteredChildFilesByItemResponse SLFileBrowser.FileSystemService.IFSOperationService.EndGetFilteredChildFilesByItem(System.IAsyncResult result) {
            return base.Channel.EndGetFilteredChildFilesByItem(result);
        }
        
        private System.IAsyncResult OnBeginGetFilteredChildFilesByItem(object[] inValues, System.AsyncCallback callback, object asyncState) {
            SLFileBrowser.FileSystemService.GetFilteredChildFilesByItemRequest request = ((SLFileBrowser.FileSystemService.GetFilteredChildFilesByItemRequest)(inValues[0]));
            return ((SLFileBrowser.FileSystemService.IFSOperationService)(this)).BeginGetFilteredChildFilesByItem(request, callback, asyncState);
        }
        
        private object[] OnEndGetFilteredChildFilesByItem(System.IAsyncResult result) {
            SLFileBrowser.FileSystemService.GetFilteredChildFilesByItemResponse retVal = ((SLFileBrowser.FileSystemService.IFSOperationService)(this)).EndGetFilteredChildFilesByItem(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetFilteredChildFilesByItemCompleted(object state) {
            if ((this.GetFilteredChildFilesByItemCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFilteredChildFilesByItemCompleted(this, new GetFilteredChildFilesByItemCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFilteredChildFilesByItemAsync(SLFileBrowser.FileSystemService.GetFilteredChildFilesByItemRequest request) {
            this.GetFilteredChildFilesByItemAsync(request, null);
        }
        
        public void GetFilteredChildFilesByItemAsync(SLFileBrowser.FileSystemService.GetFilteredChildFilesByItemRequest request, object userState) {
            if ((this.onBeginGetFilteredChildFilesByItemDelegate == null)) {
                this.onBeginGetFilteredChildFilesByItemDelegate = new BeginOperationDelegate(this.OnBeginGetFilteredChildFilesByItem);
            }
            if ((this.onEndGetFilteredChildFilesByItemDelegate == null)) {
                this.onEndGetFilteredChildFilesByItemDelegate = new EndOperationDelegate(this.OnEndGetFilteredChildFilesByItem);
            }
            if ((this.onGetFilteredChildFilesByItemCompletedDelegate == null)) {
                this.onGetFilteredChildFilesByItemCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFilteredChildFilesByItemCompleted);
            }
            base.InvokeAsync(this.onBeginGetFilteredChildFilesByItemDelegate, new object[] {
                        request}, this.onEndGetFilteredChildFilesByItemDelegate, this.onGetFilteredChildFilesByItemCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SLFileBrowser.FileSystemService.IFSOperationService.BeginGetFolderContents(SLFileBrowser.FileSystemService.GetFolderContentsRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetFolderContents(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SLFileBrowser.FileSystemService.GetFolderContentsResponse SLFileBrowser.FileSystemService.IFSOperationService.EndGetFolderContents(System.IAsyncResult result) {
            return base.Channel.EndGetFolderContents(result);
        }
        
        private System.IAsyncResult OnBeginGetFolderContents(object[] inValues, System.AsyncCallback callback, object asyncState) {
            SLFileBrowser.FileSystemService.GetFolderContentsRequest request = ((SLFileBrowser.FileSystemService.GetFolderContentsRequest)(inValues[0]));
            return ((SLFileBrowser.FileSystemService.IFSOperationService)(this)).BeginGetFolderContents(request, callback, asyncState);
        }
        
        private object[] OnEndGetFolderContents(System.IAsyncResult result) {
            SLFileBrowser.FileSystemService.GetFolderContentsResponse retVal = ((SLFileBrowser.FileSystemService.IFSOperationService)(this)).EndGetFolderContents(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetFolderContentsCompleted(object state) {
            if ((this.GetFolderContentsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFolderContentsCompleted(this, new GetFolderContentsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFolderContentsAsync(SLFileBrowser.FileSystemService.GetFolderContentsRequest request) {
            this.GetFolderContentsAsync(request, null);
        }
        
        public void GetFolderContentsAsync(SLFileBrowser.FileSystemService.GetFolderContentsRequest request, object userState) {
            if ((this.onBeginGetFolderContentsDelegate == null)) {
                this.onBeginGetFolderContentsDelegate = new BeginOperationDelegate(this.OnBeginGetFolderContents);
            }
            if ((this.onEndGetFolderContentsDelegate == null)) {
                this.onEndGetFolderContentsDelegate = new EndOperationDelegate(this.OnEndGetFolderContents);
            }
            if ((this.onGetFolderContentsCompletedDelegate == null)) {
                this.onGetFolderContentsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFolderContentsCompleted);
            }
            base.InvokeAsync(this.onBeginGetFolderContentsDelegate, new object[] {
                        request}, this.onEndGetFolderContentsDelegate, this.onGetFolderContentsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SLFileBrowser.FileSystemService.IFSOperationService.BeginGetFolderContentsByItem(SLFileBrowser.FileSystemService.GetFolderContentsByItemRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetFolderContentsByItem(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SLFileBrowser.FileSystemService.GetFolderContentsByItemResponse SLFileBrowser.FileSystemService.IFSOperationService.EndGetFolderContentsByItem(System.IAsyncResult result) {
            return base.Channel.EndGetFolderContentsByItem(result);
        }
        
        private System.IAsyncResult OnBeginGetFolderContentsByItem(object[] inValues, System.AsyncCallback callback, object asyncState) {
            SLFileBrowser.FileSystemService.GetFolderContentsByItemRequest request = ((SLFileBrowser.FileSystemService.GetFolderContentsByItemRequest)(inValues[0]));
            return ((SLFileBrowser.FileSystemService.IFSOperationService)(this)).BeginGetFolderContentsByItem(request, callback, asyncState);
        }
        
        private object[] OnEndGetFolderContentsByItem(System.IAsyncResult result) {
            SLFileBrowser.FileSystemService.GetFolderContentsByItemResponse retVal = ((SLFileBrowser.FileSystemService.IFSOperationService)(this)).EndGetFolderContentsByItem(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetFolderContentsByItemCompleted(object state) {
            if ((this.GetFolderContentsByItemCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFolderContentsByItemCompleted(this, new GetFolderContentsByItemCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFolderContentsByItemAsync(SLFileBrowser.FileSystemService.GetFolderContentsByItemRequest request) {
            this.GetFolderContentsByItemAsync(request, null);
        }
        
        public void GetFolderContentsByItemAsync(SLFileBrowser.FileSystemService.GetFolderContentsByItemRequest request, object userState) {
            if ((this.onBeginGetFolderContentsByItemDelegate == null)) {
                this.onBeginGetFolderContentsByItemDelegate = new BeginOperationDelegate(this.OnBeginGetFolderContentsByItem);
            }
            if ((this.onEndGetFolderContentsByItemDelegate == null)) {
                this.onEndGetFolderContentsByItemDelegate = new EndOperationDelegate(this.OnEndGetFolderContentsByItem);
            }
            if ((this.onGetFolderContentsByItemCompletedDelegate == null)) {
                this.onGetFolderContentsByItemCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFolderContentsByItemCompleted);
            }
            base.InvokeAsync(this.onBeginGetFolderContentsByItemDelegate, new object[] {
                        request}, this.onEndGetFolderContentsByItemDelegate, this.onGetFolderContentsByItemCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SLFileBrowser.FileSystemService.IFSOperationService.BeginGetFilteredFolderContents(SLFileBrowser.FileSystemService.GetFilteredFolderContentsRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetFilteredFolderContents(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SLFileBrowser.FileSystemService.GetFilteredFolderContentsResponse SLFileBrowser.FileSystemService.IFSOperationService.EndGetFilteredFolderContents(System.IAsyncResult result) {
            return base.Channel.EndGetFilteredFolderContents(result);
        }
        
        private System.IAsyncResult OnBeginGetFilteredFolderContents(object[] inValues, System.AsyncCallback callback, object asyncState) {
            SLFileBrowser.FileSystemService.GetFilteredFolderContentsRequest request = ((SLFileBrowser.FileSystemService.GetFilteredFolderContentsRequest)(inValues[0]));
            return ((SLFileBrowser.FileSystemService.IFSOperationService)(this)).BeginGetFilteredFolderContents(request, callback, asyncState);
        }
        
        private object[] OnEndGetFilteredFolderContents(System.IAsyncResult result) {
            SLFileBrowser.FileSystemService.GetFilteredFolderContentsResponse retVal = ((SLFileBrowser.FileSystemService.IFSOperationService)(this)).EndGetFilteredFolderContents(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetFilteredFolderContentsCompleted(object state) {
            if ((this.GetFilteredFolderContentsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFilteredFolderContentsCompleted(this, new GetFilteredFolderContentsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFilteredFolderContentsAsync(SLFileBrowser.FileSystemService.GetFilteredFolderContentsRequest request) {
            this.GetFilteredFolderContentsAsync(request, null);
        }
        
        public void GetFilteredFolderContentsAsync(SLFileBrowser.FileSystemService.GetFilteredFolderContentsRequest request, object userState) {
            if ((this.onBeginGetFilteredFolderContentsDelegate == null)) {
                this.onBeginGetFilteredFolderContentsDelegate = new BeginOperationDelegate(this.OnBeginGetFilteredFolderContents);
            }
            if ((this.onEndGetFilteredFolderContentsDelegate == null)) {
                this.onEndGetFilteredFolderContentsDelegate = new EndOperationDelegate(this.OnEndGetFilteredFolderContents);
            }
            if ((this.onGetFilteredFolderContentsCompletedDelegate == null)) {
                this.onGetFilteredFolderContentsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFilteredFolderContentsCompleted);
            }
            base.InvokeAsync(this.onBeginGetFilteredFolderContentsDelegate, new object[] {
                        request}, this.onEndGetFilteredFolderContentsDelegate, this.onGetFilteredFolderContentsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SLFileBrowser.FileSystemService.IFSOperationService.BeginGetFilteredFolderContentsByItem(SLFileBrowser.FileSystemService.GetFilteredFolderContentsByItemRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetFilteredFolderContentsByItem(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SLFileBrowser.FileSystemService.GetFilteredFolderContentsByItemResponse SLFileBrowser.FileSystemService.IFSOperationService.EndGetFilteredFolderContentsByItem(System.IAsyncResult result) {
            return base.Channel.EndGetFilteredFolderContentsByItem(result);
        }
        
        private System.IAsyncResult OnBeginGetFilteredFolderContentsByItem(object[] inValues, System.AsyncCallback callback, object asyncState) {
            SLFileBrowser.FileSystemService.GetFilteredFolderContentsByItemRequest request = ((SLFileBrowser.FileSystemService.GetFilteredFolderContentsByItemRequest)(inValues[0]));
            return ((SLFileBrowser.FileSystemService.IFSOperationService)(this)).BeginGetFilteredFolderContentsByItem(request, callback, asyncState);
        }
        
        private object[] OnEndGetFilteredFolderContentsByItem(System.IAsyncResult result) {
            SLFileBrowser.FileSystemService.GetFilteredFolderContentsByItemResponse retVal = ((SLFileBrowser.FileSystemService.IFSOperationService)(this)).EndGetFilteredFolderContentsByItem(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetFilteredFolderContentsByItemCompleted(object state) {
            if ((this.GetFilteredFolderContentsByItemCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFilteredFolderContentsByItemCompleted(this, new GetFilteredFolderContentsByItemCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFilteredFolderContentsByItemAsync(SLFileBrowser.FileSystemService.GetFilteredFolderContentsByItemRequest request) {
            this.GetFilteredFolderContentsByItemAsync(request, null);
        }
        
        public void GetFilteredFolderContentsByItemAsync(SLFileBrowser.FileSystemService.GetFilteredFolderContentsByItemRequest request, object userState) {
            if ((this.onBeginGetFilteredFolderContentsByItemDelegate == null)) {
                this.onBeginGetFilteredFolderContentsByItemDelegate = new BeginOperationDelegate(this.OnBeginGetFilteredFolderContentsByItem);
            }
            if ((this.onEndGetFilteredFolderContentsByItemDelegate == null)) {
                this.onEndGetFilteredFolderContentsByItemDelegate = new EndOperationDelegate(this.OnEndGetFilteredFolderContentsByItem);
            }
            if ((this.onGetFilteredFolderContentsByItemCompletedDelegate == null)) {
                this.onGetFilteredFolderContentsByItemCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFilteredFolderContentsByItemCompleted);
            }
            base.InvokeAsync(this.onBeginGetFilteredFolderContentsByItemDelegate, new object[] {
                        request}, this.onEndGetFilteredFolderContentsByItemDelegate, this.onGetFilteredFolderContentsByItemCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SLFileBrowser.FileSystemService.IFSOperationService.BeginIsFileAvailable(SLFileBrowser.FileSystemService.IsFileAvailableRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIsFileAvailable(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SLFileBrowser.FileSystemService.IsFileAvailableResponse SLFileBrowser.FileSystemService.IFSOperationService.EndIsFileAvailable(System.IAsyncResult result) {
            return base.Channel.EndIsFileAvailable(result);
        }
        
        private System.IAsyncResult OnBeginIsFileAvailable(object[] inValues, System.AsyncCallback callback, object asyncState) {
            SLFileBrowser.FileSystemService.IsFileAvailableRequest request = ((SLFileBrowser.FileSystemService.IsFileAvailableRequest)(inValues[0]));
            return ((SLFileBrowser.FileSystemService.IFSOperationService)(this)).BeginIsFileAvailable(request, callback, asyncState);
        }
        
        private object[] OnEndIsFileAvailable(System.IAsyncResult result) {
            SLFileBrowser.FileSystemService.IsFileAvailableResponse retVal = ((SLFileBrowser.FileSystemService.IFSOperationService)(this)).EndIsFileAvailable(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIsFileAvailableCompleted(object state) {
            if ((this.IsFileAvailableCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.IsFileAvailableCompleted(this, new IsFileAvailableCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void IsFileAvailableAsync(SLFileBrowser.FileSystemService.IsFileAvailableRequest request) {
            this.IsFileAvailableAsync(request, null);
        }
        
        public void IsFileAvailableAsync(SLFileBrowser.FileSystemService.IsFileAvailableRequest request, object userState) {
            if ((this.onBeginIsFileAvailableDelegate == null)) {
                this.onBeginIsFileAvailableDelegate = new BeginOperationDelegate(this.OnBeginIsFileAvailable);
            }
            if ((this.onEndIsFileAvailableDelegate == null)) {
                this.onEndIsFileAvailableDelegate = new EndOperationDelegate(this.OnEndIsFileAvailable);
            }
            if ((this.onIsFileAvailableCompletedDelegate == null)) {
                this.onIsFileAvailableCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIsFileAvailableCompleted);
            }
            base.InvokeAsync(this.onBeginIsFileAvailableDelegate, new object[] {
                        request}, this.onEndIsFileAvailableDelegate, this.onIsFileAvailableCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SLFileBrowser.FileSystemService.IFSOperationService.BeginIsFolderAvailable(SLFileBrowser.FileSystemService.IsFolderAvailableRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIsFolderAvailable(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SLFileBrowser.FileSystemService.IsFolderAvailableResponse SLFileBrowser.FileSystemService.IFSOperationService.EndIsFolderAvailable(System.IAsyncResult result) {
            return base.Channel.EndIsFolderAvailable(result);
        }
        
        private System.IAsyncResult OnBeginIsFolderAvailable(object[] inValues, System.AsyncCallback callback, object asyncState) {
            SLFileBrowser.FileSystemService.IsFolderAvailableRequest request = ((SLFileBrowser.FileSystemService.IsFolderAvailableRequest)(inValues[0]));
            return ((SLFileBrowser.FileSystemService.IFSOperationService)(this)).BeginIsFolderAvailable(request, callback, asyncState);
        }
        
        private object[] OnEndIsFolderAvailable(System.IAsyncResult result) {
            SLFileBrowser.FileSystemService.IsFolderAvailableResponse retVal = ((SLFileBrowser.FileSystemService.IFSOperationService)(this)).EndIsFolderAvailable(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIsFolderAvailableCompleted(object state) {
            if ((this.IsFolderAvailableCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.IsFolderAvailableCompleted(this, new IsFolderAvailableCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void IsFolderAvailableAsync(SLFileBrowser.FileSystemService.IsFolderAvailableRequest request) {
            this.IsFolderAvailableAsync(request, null);
        }
        
        public void IsFolderAvailableAsync(SLFileBrowser.FileSystemService.IsFolderAvailableRequest request, object userState) {
            if ((this.onBeginIsFolderAvailableDelegate == null)) {
                this.onBeginIsFolderAvailableDelegate = new BeginOperationDelegate(this.OnBeginIsFolderAvailable);
            }
            if ((this.onEndIsFolderAvailableDelegate == null)) {
                this.onEndIsFolderAvailableDelegate = new EndOperationDelegate(this.OnEndIsFolderAvailable);
            }
            if ((this.onIsFolderAvailableCompletedDelegate == null)) {
                this.onIsFolderAvailableCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIsFolderAvailableCompleted);
            }
            base.InvokeAsync(this.onBeginIsFolderAvailableDelegate, new object[] {
                        request}, this.onEndIsFolderAvailableDelegate, this.onIsFolderAvailableCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SLFileBrowser.FileSystemService.IFSOperationService.BeginCreateFolderUnderParent(SLFileBrowser.FileSystemService.CreateFolderUnderParentRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCreateFolderUnderParent(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SLFileBrowser.FileSystemService.CreateFolderUnderParentResponse SLFileBrowser.FileSystemService.IFSOperationService.EndCreateFolderUnderParent(System.IAsyncResult result) {
            return base.Channel.EndCreateFolderUnderParent(result);
        }
        
        private System.IAsyncResult OnBeginCreateFolderUnderParent(object[] inValues, System.AsyncCallback callback, object asyncState) {
            SLFileBrowser.FileSystemService.CreateFolderUnderParentRequest request = ((SLFileBrowser.FileSystemService.CreateFolderUnderParentRequest)(inValues[0]));
            return ((SLFileBrowser.FileSystemService.IFSOperationService)(this)).BeginCreateFolderUnderParent(request, callback, asyncState);
        }
        
        private object[] OnEndCreateFolderUnderParent(System.IAsyncResult result) {
            SLFileBrowser.FileSystemService.CreateFolderUnderParentResponse retVal = ((SLFileBrowser.FileSystemService.IFSOperationService)(this)).EndCreateFolderUnderParent(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCreateFolderUnderParentCompleted(object state) {
            if ((this.CreateFolderUnderParentCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CreateFolderUnderParentCompleted(this, new CreateFolderUnderParentCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CreateFolderUnderParentAsync(SLFileBrowser.FileSystemService.CreateFolderUnderParentRequest request) {
            this.CreateFolderUnderParentAsync(request, null);
        }
        
        public void CreateFolderUnderParentAsync(SLFileBrowser.FileSystemService.CreateFolderUnderParentRequest request, object userState) {
            if ((this.onBeginCreateFolderUnderParentDelegate == null)) {
                this.onBeginCreateFolderUnderParentDelegate = new BeginOperationDelegate(this.OnBeginCreateFolderUnderParent);
            }
            if ((this.onEndCreateFolderUnderParentDelegate == null)) {
                this.onEndCreateFolderUnderParentDelegate = new EndOperationDelegate(this.OnEndCreateFolderUnderParent);
            }
            if ((this.onCreateFolderUnderParentCompletedDelegate == null)) {
                this.onCreateFolderUnderParentCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCreateFolderUnderParentCompleted);
            }
            base.InvokeAsync(this.onBeginCreateFolderUnderParentDelegate, new object[] {
                        request}, this.onEndCreateFolderUnderParentDelegate, this.onCreateFolderUnderParentCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SLFileBrowser.FileSystemService.IFSOperationService.BeginCreateFolder(SLFileBrowser.FileSystemService.CreateFolderRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCreateFolder(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SLFileBrowser.FileSystemService.CreateFolderResponse SLFileBrowser.FileSystemService.IFSOperationService.EndCreateFolder(System.IAsyncResult result) {
            return base.Channel.EndCreateFolder(result);
        }
        
        private System.IAsyncResult OnBeginCreateFolder(object[] inValues, System.AsyncCallback callback, object asyncState) {
            SLFileBrowser.FileSystemService.CreateFolderRequest request = ((SLFileBrowser.FileSystemService.CreateFolderRequest)(inValues[0]));
            return ((SLFileBrowser.FileSystemService.IFSOperationService)(this)).BeginCreateFolder(request, callback, asyncState);
        }
        
        private object[] OnEndCreateFolder(System.IAsyncResult result) {
            SLFileBrowser.FileSystemService.CreateFolderResponse retVal = ((SLFileBrowser.FileSystemService.IFSOperationService)(this)).EndCreateFolder(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCreateFolderCompleted(object state) {
            if ((this.CreateFolderCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CreateFolderCompleted(this, new CreateFolderCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CreateFolderAsync(SLFileBrowser.FileSystemService.CreateFolderRequest request) {
            this.CreateFolderAsync(request, null);
        }
        
        public void CreateFolderAsync(SLFileBrowser.FileSystemService.CreateFolderRequest request, object userState) {
            if ((this.onBeginCreateFolderDelegate == null)) {
                this.onBeginCreateFolderDelegate = new BeginOperationDelegate(this.OnBeginCreateFolder);
            }
            if ((this.onEndCreateFolderDelegate == null)) {
                this.onEndCreateFolderDelegate = new EndOperationDelegate(this.OnEndCreateFolder);
            }
            if ((this.onCreateFolderCompletedDelegate == null)) {
                this.onCreateFolderCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCreateFolderCompleted);
            }
            base.InvokeAsync(this.onBeginCreateFolderDelegate, new object[] {
                        request}, this.onEndCreateFolderDelegate, this.onCreateFolderCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SLFileBrowser.FileSystemService.IFSOperationService.BeginCreateFolderUnderParentItem(SLFileBrowser.FileSystemService.CreateFolderUnderParentItemRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCreateFolderUnderParentItem(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SLFileBrowser.FileSystemService.CreateFolderUnderParentItemResponse SLFileBrowser.FileSystemService.IFSOperationService.EndCreateFolderUnderParentItem(System.IAsyncResult result) {
            return base.Channel.EndCreateFolderUnderParentItem(result);
        }
        
        private System.IAsyncResult OnBeginCreateFolderUnderParentItem(object[] inValues, System.AsyncCallback callback, object asyncState) {
            SLFileBrowser.FileSystemService.CreateFolderUnderParentItemRequest request = ((SLFileBrowser.FileSystemService.CreateFolderUnderParentItemRequest)(inValues[0]));
            return ((SLFileBrowser.FileSystemService.IFSOperationService)(this)).BeginCreateFolderUnderParentItem(request, callback, asyncState);
        }
        
        private object[] OnEndCreateFolderUnderParentItem(System.IAsyncResult result) {
            SLFileBrowser.FileSystemService.CreateFolderUnderParentItemResponse retVal = ((SLFileBrowser.FileSystemService.IFSOperationService)(this)).EndCreateFolderUnderParentItem(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCreateFolderUnderParentItemCompleted(object state) {
            if ((this.CreateFolderUnderParentItemCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CreateFolderUnderParentItemCompleted(this, new CreateFolderUnderParentItemCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CreateFolderUnderParentItemAsync(SLFileBrowser.FileSystemService.CreateFolderUnderParentItemRequest request) {
            this.CreateFolderUnderParentItemAsync(request, null);
        }
        
        public void CreateFolderUnderParentItemAsync(SLFileBrowser.FileSystemService.CreateFolderUnderParentItemRequest request, object userState) {
            if ((this.onBeginCreateFolderUnderParentItemDelegate == null)) {
                this.onBeginCreateFolderUnderParentItemDelegate = new BeginOperationDelegate(this.OnBeginCreateFolderUnderParentItem);
            }
            if ((this.onEndCreateFolderUnderParentItemDelegate == null)) {
                this.onEndCreateFolderUnderParentItemDelegate = new EndOperationDelegate(this.OnEndCreateFolderUnderParentItem);
            }
            if ((this.onCreateFolderUnderParentItemCompletedDelegate == null)) {
                this.onCreateFolderUnderParentItemCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCreateFolderUnderParentItemCompleted);
            }
            base.InvokeAsync(this.onBeginCreateFolderUnderParentItemDelegate, new object[] {
                        request}, this.onEndCreateFolderUnderParentItemDelegate, this.onCreateFolderUnderParentItemCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SLFileBrowser.FileSystemService.IFSOperationService.BeginDeleteFolder(SLFileBrowser.FileSystemService.DeleteFolderRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteFolder(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SLFileBrowser.FileSystemService.DeleteFolderResponse SLFileBrowser.FileSystemService.IFSOperationService.EndDeleteFolder(System.IAsyncResult result) {
            return base.Channel.EndDeleteFolder(result);
        }
        
        private System.IAsyncResult OnBeginDeleteFolder(object[] inValues, System.AsyncCallback callback, object asyncState) {
            SLFileBrowser.FileSystemService.DeleteFolderRequest request = ((SLFileBrowser.FileSystemService.DeleteFolderRequest)(inValues[0]));
            return ((SLFileBrowser.FileSystemService.IFSOperationService)(this)).BeginDeleteFolder(request, callback, asyncState);
        }
        
        private object[] OnEndDeleteFolder(System.IAsyncResult result) {
            SLFileBrowser.FileSystemService.DeleteFolderResponse retVal = ((SLFileBrowser.FileSystemService.IFSOperationService)(this)).EndDeleteFolder(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeleteFolderCompleted(object state) {
            if ((this.DeleteFolderCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteFolderCompleted(this, new DeleteFolderCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteFolderAsync(SLFileBrowser.FileSystemService.DeleteFolderRequest request) {
            this.DeleteFolderAsync(request, null);
        }
        
        public void DeleteFolderAsync(SLFileBrowser.FileSystemService.DeleteFolderRequest request, object userState) {
            if ((this.onBeginDeleteFolderDelegate == null)) {
                this.onBeginDeleteFolderDelegate = new BeginOperationDelegate(this.OnBeginDeleteFolder);
            }
            if ((this.onEndDeleteFolderDelegate == null)) {
                this.onEndDeleteFolderDelegate = new EndOperationDelegate(this.OnEndDeleteFolder);
            }
            if ((this.onDeleteFolderCompletedDelegate == null)) {
                this.onDeleteFolderCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteFolderCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteFolderDelegate, new object[] {
                        request}, this.onEndDeleteFolderDelegate, this.onDeleteFolderCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SLFileBrowser.FileSystemService.IFSOperationService.BeginDeleteFile(SLFileBrowser.FileSystemService.DeleteFileRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteFile(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SLFileBrowser.FileSystemService.DeleteFileResponse SLFileBrowser.FileSystemService.IFSOperationService.EndDeleteFile(System.IAsyncResult result) {
            return base.Channel.EndDeleteFile(result);
        }
        
        private System.IAsyncResult OnBeginDeleteFile(object[] inValues, System.AsyncCallback callback, object asyncState) {
            SLFileBrowser.FileSystemService.DeleteFileRequest request = ((SLFileBrowser.FileSystemService.DeleteFileRequest)(inValues[0]));
            return ((SLFileBrowser.FileSystemService.IFSOperationService)(this)).BeginDeleteFile(request, callback, asyncState);
        }
        
        private object[] OnEndDeleteFile(System.IAsyncResult result) {
            SLFileBrowser.FileSystemService.DeleteFileResponse retVal = ((SLFileBrowser.FileSystemService.IFSOperationService)(this)).EndDeleteFile(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeleteFileCompleted(object state) {
            if ((this.DeleteFileCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteFileCompleted(this, new DeleteFileCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteFileAsync(SLFileBrowser.FileSystemService.DeleteFileRequest request) {
            this.DeleteFileAsync(request, null);
        }
        
        public void DeleteFileAsync(SLFileBrowser.FileSystemService.DeleteFileRequest request, object userState) {
            if ((this.onBeginDeleteFileDelegate == null)) {
                this.onBeginDeleteFileDelegate = new BeginOperationDelegate(this.OnBeginDeleteFile);
            }
            if ((this.onEndDeleteFileDelegate == null)) {
                this.onEndDeleteFileDelegate = new EndOperationDelegate(this.OnEndDeleteFile);
            }
            if ((this.onDeleteFileCompletedDelegate == null)) {
                this.onDeleteFileCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteFileCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteFileDelegate, new object[] {
                        request}, this.onEndDeleteFileDelegate, this.onDeleteFileCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SLFileBrowser.FileSystemService.IFSOperationService.BeginMoveFolder(SLFileBrowser.FileSystemService.MoveFolderRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginMoveFolder(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SLFileBrowser.FileSystemService.MoveFolderResponse SLFileBrowser.FileSystemService.IFSOperationService.EndMoveFolder(System.IAsyncResult result) {
            return base.Channel.EndMoveFolder(result);
        }
        
        private System.IAsyncResult OnBeginMoveFolder(object[] inValues, System.AsyncCallback callback, object asyncState) {
            SLFileBrowser.FileSystemService.MoveFolderRequest request = ((SLFileBrowser.FileSystemService.MoveFolderRequest)(inValues[0]));
            return ((SLFileBrowser.FileSystemService.IFSOperationService)(this)).BeginMoveFolder(request, callback, asyncState);
        }
        
        private object[] OnEndMoveFolder(System.IAsyncResult result) {
            SLFileBrowser.FileSystemService.MoveFolderResponse retVal = ((SLFileBrowser.FileSystemService.IFSOperationService)(this)).EndMoveFolder(result);
            return new object[] {
                    retVal};
        }
        
        private void OnMoveFolderCompleted(object state) {
            if ((this.MoveFolderCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.MoveFolderCompleted(this, new MoveFolderCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void MoveFolderAsync(SLFileBrowser.FileSystemService.MoveFolderRequest request) {
            this.MoveFolderAsync(request, null);
        }
        
        public void MoveFolderAsync(SLFileBrowser.FileSystemService.MoveFolderRequest request, object userState) {
            if ((this.onBeginMoveFolderDelegate == null)) {
                this.onBeginMoveFolderDelegate = new BeginOperationDelegate(this.OnBeginMoveFolder);
            }
            if ((this.onEndMoveFolderDelegate == null)) {
                this.onEndMoveFolderDelegate = new EndOperationDelegate(this.OnEndMoveFolder);
            }
            if ((this.onMoveFolderCompletedDelegate == null)) {
                this.onMoveFolderCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnMoveFolderCompleted);
            }
            base.InvokeAsync(this.onBeginMoveFolderDelegate, new object[] {
                        request}, this.onEndMoveFolderDelegate, this.onMoveFolderCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SLFileBrowser.FileSystemService.IFSOperationService.BeginMoveFolderItem(SLFileBrowser.FileSystemService.MoveFolderItemRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginMoveFolderItem(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SLFileBrowser.FileSystemService.MoveFolderItemResponse SLFileBrowser.FileSystemService.IFSOperationService.EndMoveFolderItem(System.IAsyncResult result) {
            return base.Channel.EndMoveFolderItem(result);
        }
        
        private System.IAsyncResult OnBeginMoveFolderItem(object[] inValues, System.AsyncCallback callback, object asyncState) {
            SLFileBrowser.FileSystemService.MoveFolderItemRequest request = ((SLFileBrowser.FileSystemService.MoveFolderItemRequest)(inValues[0]));
            return ((SLFileBrowser.FileSystemService.IFSOperationService)(this)).BeginMoveFolderItem(request, callback, asyncState);
        }
        
        private object[] OnEndMoveFolderItem(System.IAsyncResult result) {
            SLFileBrowser.FileSystemService.MoveFolderItemResponse retVal = ((SLFileBrowser.FileSystemService.IFSOperationService)(this)).EndMoveFolderItem(result);
            return new object[] {
                    retVal};
        }
        
        private void OnMoveFolderItemCompleted(object state) {
            if ((this.MoveFolderItemCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.MoveFolderItemCompleted(this, new MoveFolderItemCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void MoveFolderItemAsync(SLFileBrowser.FileSystemService.MoveFolderItemRequest request) {
            this.MoveFolderItemAsync(request, null);
        }
        
        public void MoveFolderItemAsync(SLFileBrowser.FileSystemService.MoveFolderItemRequest request, object userState) {
            if ((this.onBeginMoveFolderItemDelegate == null)) {
                this.onBeginMoveFolderItemDelegate = new BeginOperationDelegate(this.OnBeginMoveFolderItem);
            }
            if ((this.onEndMoveFolderItemDelegate == null)) {
                this.onEndMoveFolderItemDelegate = new EndOperationDelegate(this.OnEndMoveFolderItem);
            }
            if ((this.onMoveFolderItemCompletedDelegate == null)) {
                this.onMoveFolderItemCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnMoveFolderItemCompleted);
            }
            base.InvokeAsync(this.onBeginMoveFolderItemDelegate, new object[] {
                        request}, this.onEndMoveFolderItemDelegate, this.onMoveFolderItemCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override SLFileBrowser.FileSystemService.IFSOperationService CreateChannel() {
            return new FSOperationServiceClientChannel(this);
        }
        
        private class FSOperationServiceClientChannel : ChannelBase<SLFileBrowser.FileSystemService.IFSOperationService>, SLFileBrowser.FileSystemService.IFSOperationService {
            
            public FSOperationServiceClientChannel(System.ServiceModel.ClientBase<SLFileBrowser.FileSystemService.IFSOperationService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginMoveFile(SLFileBrowser.FileSystemService.MoveFileRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("MoveFile", _args, callback, asyncState);
                return _result;
            }
            
            public SLFileBrowser.FileSystemService.MoveFileResponse EndMoveFile(System.IAsyncResult result) {
                object[] _args = new object[0];
                SLFileBrowser.FileSystemService.MoveFileResponse _result = ((SLFileBrowser.FileSystemService.MoveFileResponse)(base.EndInvoke("MoveFile", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginMoveFileItem(SLFileBrowser.FileSystemService.MoveFileItemRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("MoveFileItem", _args, callback, asyncState);
                return _result;
            }
            
            public SLFileBrowser.FileSystemService.MoveFileItemResponse EndMoveFileItem(System.IAsyncResult result) {
                object[] _args = new object[0];
                SLFileBrowser.FileSystemService.MoveFileItemResponse _result = ((SLFileBrowser.FileSystemService.MoveFileItemResponse)(base.EndInvoke("MoveFileItem", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginCopyFolder(SLFileBrowser.FileSystemService.CopyFolderRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("CopyFolder", _args, callback, asyncState);
                return _result;
            }
            
            public SLFileBrowser.FileSystemService.CopyFolderResponse EndCopyFolder(System.IAsyncResult result) {
                object[] _args = new object[0];
                SLFileBrowser.FileSystemService.CopyFolderResponse _result = ((SLFileBrowser.FileSystemService.CopyFolderResponse)(base.EndInvoke("CopyFolder", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginCopyFolderItem(SLFileBrowser.FileSystemService.CopyFolderItemRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("CopyFolderItem", _args, callback, asyncState);
                return _result;
            }
            
            public SLFileBrowser.FileSystemService.CopyFolderItemResponse EndCopyFolderItem(System.IAsyncResult result) {
                object[] _args = new object[0];
                SLFileBrowser.FileSystemService.CopyFolderItemResponse _result = ((SLFileBrowser.FileSystemService.CopyFolderItemResponse)(base.EndInvoke("CopyFolderItem", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginCopyFile(SLFileBrowser.FileSystemService.CopyFileRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("CopyFile", _args, callback, asyncState);
                return _result;
            }
            
            public SLFileBrowser.FileSystemService.CopyFileResponse EndCopyFile(System.IAsyncResult result) {
                object[] _args = new object[0];
                SLFileBrowser.FileSystemService.CopyFileResponse _result = ((SLFileBrowser.FileSystemService.CopyFileResponse)(base.EndInvoke("CopyFile", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginCopyFileItem(SLFileBrowser.FileSystemService.CopyFileItemRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("CopyFileItem", _args, callback, asyncState);
                return _result;
            }
            
            public SLFileBrowser.FileSystemService.CopyFileItemResponse EndCopyFileItem(System.IAsyncResult result) {
                object[] _args = new object[0];
                SLFileBrowser.FileSystemService.CopyFileItemResponse _result = ((SLFileBrowser.FileSystemService.CopyFileItemResponse)(base.EndInvoke("CopyFileItem", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginCreateFilePath(SLFileBrowser.FileSystemService.CreateFilePathRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("CreateFilePath", _args, callback, asyncState);
                return _result;
            }
            
            public SLFileBrowser.FileSystemService.CreateFilePathResponse EndCreateFilePath(System.IAsyncResult result) {
                object[] _args = new object[0];
                SLFileBrowser.FileSystemService.CreateFilePathResponse _result = ((SLFileBrowser.FileSystemService.CreateFilePathResponse)(base.EndInvoke("CreateFilePath", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginCreateFolderPath(SLFileBrowser.FileSystemService.CreateFolderPathRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("CreateFolderPath", _args, callback, asyncState);
                return _result;
            }
            
            public SLFileBrowser.FileSystemService.CreateFolderPathResponse EndCreateFolderPath(System.IAsyncResult result) {
                object[] _args = new object[0];
                SLFileBrowser.FileSystemService.CreateFolderPathResponse _result = ((SLFileBrowser.FileSystemService.CreateFolderPathResponse)(base.EndInvoke("CreateFolderPath", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetFileSystemRoot(SLFileBrowser.FileSystemService.GetFileSystemRootRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("GetFileSystemRoot", _args, callback, asyncState);
                return _result;
            }
            
            public SLFileBrowser.FileSystemService.GetFileSystemRootResponse EndGetFileSystemRoot(System.IAsyncResult result) {
                object[] _args = new object[0];
                SLFileBrowser.FileSystemService.GetFileSystemRootResponse _result = ((SLFileBrowser.FileSystemService.GetFileSystemRootResponse)(base.EndInvoke("GetFileSystemRoot", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetFileInfo(SLFileBrowser.FileSystemService.GetFileInfoRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("GetFileInfo", _args, callback, asyncState);
                return _result;
            }
            
            public SLFileBrowser.FileSystemService.GetFileInfoResponse EndGetFileInfo(System.IAsyncResult result) {
                object[] _args = new object[0];
                SLFileBrowser.FileSystemService.GetFileInfoResponse _result = ((SLFileBrowser.FileSystemService.GetFileInfoResponse)(base.EndInvoke("GetFileInfo", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetFolderInfo(SLFileBrowser.FileSystemService.GetFolderInfoRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("GetFolderInfo", _args, callback, asyncState);
                return _result;
            }
            
            public SLFileBrowser.FileSystemService.GetFolderInfoResponse EndGetFolderInfo(System.IAsyncResult result) {
                object[] _args = new object[0];
                SLFileBrowser.FileSystemService.GetFolderInfoResponse _result = ((SLFileBrowser.FileSystemService.GetFolderInfoResponse)(base.EndInvoke("GetFolderInfo", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetFileParent(SLFileBrowser.FileSystemService.GetFileParentRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("GetFileParent", _args, callback, asyncState);
                return _result;
            }
            
            public SLFileBrowser.FileSystemService.GetFileParentResponse EndGetFileParent(System.IAsyncResult result) {
                object[] _args = new object[0];
                SLFileBrowser.FileSystemService.GetFileParentResponse _result = ((SLFileBrowser.FileSystemService.GetFileParentResponse)(base.EndInvoke("GetFileParent", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetFileParentByItem(SLFileBrowser.FileSystemService.GetFileParentByItemRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("GetFileParentByItem", _args, callback, asyncState);
                return _result;
            }
            
            public SLFileBrowser.FileSystemService.GetFileParentByItemResponse EndGetFileParentByItem(System.IAsyncResult result) {
                object[] _args = new object[0];
                SLFileBrowser.FileSystemService.GetFileParentByItemResponse _result = ((SLFileBrowser.FileSystemService.GetFileParentByItemResponse)(base.EndInvoke("GetFileParentByItem", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetFolderParent(SLFileBrowser.FileSystemService.GetFolderParentRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("GetFolderParent", _args, callback, asyncState);
                return _result;
            }
            
            public SLFileBrowser.FileSystemService.GetFolderParentResponse EndGetFolderParent(System.IAsyncResult result) {
                object[] _args = new object[0];
                SLFileBrowser.FileSystemService.GetFolderParentResponse _result = ((SLFileBrowser.FileSystemService.GetFolderParentResponse)(base.EndInvoke("GetFolderParent", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetFolderParentByItem(SLFileBrowser.FileSystemService.GetFolderParentByItemRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("GetFolderParentByItem", _args, callback, asyncState);
                return _result;
            }
            
            public SLFileBrowser.FileSystemService.GetFolderParentByItemResponse EndGetFolderParentByItem(System.IAsyncResult result) {
                object[] _args = new object[0];
                SLFileBrowser.FileSystemService.GetFolderParentByItemResponse _result = ((SLFileBrowser.FileSystemService.GetFolderParentByItemResponse)(base.EndInvoke("GetFolderParentByItem", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetChildFolders(SLFileBrowser.FileSystemService.GetChildFoldersRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("GetChildFolders", _args, callback, asyncState);
                return _result;
            }
            
            public SLFileBrowser.FileSystemService.GetChildFoldersResponse EndGetChildFolders(System.IAsyncResult result) {
                object[] _args = new object[0];
                SLFileBrowser.FileSystemService.GetChildFoldersResponse _result = ((SLFileBrowser.FileSystemService.GetChildFoldersResponse)(base.EndInvoke("GetChildFolders", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetChildFoldersByItem(SLFileBrowser.FileSystemService.GetChildFoldersByItemRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("GetChildFoldersByItem", _args, callback, asyncState);
                return _result;
            }
            
            public SLFileBrowser.FileSystemService.GetChildFoldersByItemResponse EndGetChildFoldersByItem(System.IAsyncResult result) {
                object[] _args = new object[0];
                SLFileBrowser.FileSystemService.GetChildFoldersByItemResponse _result = ((SLFileBrowser.FileSystemService.GetChildFoldersByItemResponse)(base.EndInvoke("GetChildFoldersByItem", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetFilteredChildFolders(SLFileBrowser.FileSystemService.GetFilteredChildFoldersRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("GetFilteredChildFolders", _args, callback, asyncState);
                return _result;
            }
            
            public SLFileBrowser.FileSystemService.GetFilteredChildFoldersResponse EndGetFilteredChildFolders(System.IAsyncResult result) {
                object[] _args = new object[0];
                SLFileBrowser.FileSystemService.GetFilteredChildFoldersResponse _result = ((SLFileBrowser.FileSystemService.GetFilteredChildFoldersResponse)(base.EndInvoke("GetFilteredChildFolders", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetFilteredChildFoldersByItem(SLFileBrowser.FileSystemService.GetFilteredChildFoldersByItemRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("GetFilteredChildFoldersByItem", _args, callback, asyncState);
                return _result;
            }
            
            public SLFileBrowser.FileSystemService.GetFilteredChildFoldersByItemResponse EndGetFilteredChildFoldersByItem(System.IAsyncResult result) {
                object[] _args = new object[0];
                SLFileBrowser.FileSystemService.GetFilteredChildFoldersByItemResponse _result = ((SLFileBrowser.FileSystemService.GetFilteredChildFoldersByItemResponse)(base.EndInvoke("GetFilteredChildFoldersByItem", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetChildFiles(SLFileBrowser.FileSystemService.GetChildFilesRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("GetChildFiles", _args, callback, asyncState);
                return _result;
            }
            
            public SLFileBrowser.FileSystemService.GetChildFilesResponse EndGetChildFiles(System.IAsyncResult result) {
                object[] _args = new object[0];
                SLFileBrowser.FileSystemService.GetChildFilesResponse _result = ((SLFileBrowser.FileSystemService.GetChildFilesResponse)(base.EndInvoke("GetChildFiles", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetChildFilesByItem(SLFileBrowser.FileSystemService.GetChildFilesByItemRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("GetChildFilesByItem", _args, callback, asyncState);
                return _result;
            }
            
            public SLFileBrowser.FileSystemService.GetChildFilesByItemResponse EndGetChildFilesByItem(System.IAsyncResult result) {
                object[] _args = new object[0];
                SLFileBrowser.FileSystemService.GetChildFilesByItemResponse _result = ((SLFileBrowser.FileSystemService.GetChildFilesByItemResponse)(base.EndInvoke("GetChildFilesByItem", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetFilteredChildFiles(SLFileBrowser.FileSystemService.GetFilteredChildFilesRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("GetFilteredChildFiles", _args, callback, asyncState);
                return _result;
            }
            
            public SLFileBrowser.FileSystemService.GetFilteredChildFilesResponse EndGetFilteredChildFiles(System.IAsyncResult result) {
                object[] _args = new object[0];
                SLFileBrowser.FileSystemService.GetFilteredChildFilesResponse _result = ((SLFileBrowser.FileSystemService.GetFilteredChildFilesResponse)(base.EndInvoke("GetFilteredChildFiles", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetFilteredChildFilesByItem(SLFileBrowser.FileSystemService.GetFilteredChildFilesByItemRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("GetFilteredChildFilesByItem", _args, callback, asyncState);
                return _result;
            }
            
            public SLFileBrowser.FileSystemService.GetFilteredChildFilesByItemResponse EndGetFilteredChildFilesByItem(System.IAsyncResult result) {
                object[] _args = new object[0];
                SLFileBrowser.FileSystemService.GetFilteredChildFilesByItemResponse _result = ((SLFileBrowser.FileSystemService.GetFilteredChildFilesByItemResponse)(base.EndInvoke("GetFilteredChildFilesByItem", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetFolderContents(SLFileBrowser.FileSystemService.GetFolderContentsRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("GetFolderContents", _args, callback, asyncState);
                return _result;
            }
            
            public SLFileBrowser.FileSystemService.GetFolderContentsResponse EndGetFolderContents(System.IAsyncResult result) {
                object[] _args = new object[0];
                SLFileBrowser.FileSystemService.GetFolderContentsResponse _result = ((SLFileBrowser.FileSystemService.GetFolderContentsResponse)(base.EndInvoke("GetFolderContents", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetFolderContentsByItem(SLFileBrowser.FileSystemService.GetFolderContentsByItemRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("GetFolderContentsByItem", _args, callback, asyncState);
                return _result;
            }
            
            public SLFileBrowser.FileSystemService.GetFolderContentsByItemResponse EndGetFolderContentsByItem(System.IAsyncResult result) {
                object[] _args = new object[0];
                SLFileBrowser.FileSystemService.GetFolderContentsByItemResponse _result = ((SLFileBrowser.FileSystemService.GetFolderContentsByItemResponse)(base.EndInvoke("GetFolderContentsByItem", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetFilteredFolderContents(SLFileBrowser.FileSystemService.GetFilteredFolderContentsRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("GetFilteredFolderContents", _args, callback, asyncState);
                return _result;
            }
            
            public SLFileBrowser.FileSystemService.GetFilteredFolderContentsResponse EndGetFilteredFolderContents(System.IAsyncResult result) {
                object[] _args = new object[0];
                SLFileBrowser.FileSystemService.GetFilteredFolderContentsResponse _result = ((SLFileBrowser.FileSystemService.GetFilteredFolderContentsResponse)(base.EndInvoke("GetFilteredFolderContents", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetFilteredFolderContentsByItem(SLFileBrowser.FileSystemService.GetFilteredFolderContentsByItemRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("GetFilteredFolderContentsByItem", _args, callback, asyncState);
                return _result;
            }
            
            public SLFileBrowser.FileSystemService.GetFilteredFolderContentsByItemResponse EndGetFilteredFolderContentsByItem(System.IAsyncResult result) {
                object[] _args = new object[0];
                SLFileBrowser.FileSystemService.GetFilteredFolderContentsByItemResponse _result = ((SLFileBrowser.FileSystemService.GetFilteredFolderContentsByItemResponse)(base.EndInvoke("GetFilteredFolderContentsByItem", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginIsFileAvailable(SLFileBrowser.FileSystemService.IsFileAvailableRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("IsFileAvailable", _args, callback, asyncState);
                return _result;
            }
            
            public SLFileBrowser.FileSystemService.IsFileAvailableResponse EndIsFileAvailable(System.IAsyncResult result) {
                object[] _args = new object[0];
                SLFileBrowser.FileSystemService.IsFileAvailableResponse _result = ((SLFileBrowser.FileSystemService.IsFileAvailableResponse)(base.EndInvoke("IsFileAvailable", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginIsFolderAvailable(SLFileBrowser.FileSystemService.IsFolderAvailableRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("IsFolderAvailable", _args, callback, asyncState);
                return _result;
            }
            
            public SLFileBrowser.FileSystemService.IsFolderAvailableResponse EndIsFolderAvailable(System.IAsyncResult result) {
                object[] _args = new object[0];
                SLFileBrowser.FileSystemService.IsFolderAvailableResponse _result = ((SLFileBrowser.FileSystemService.IsFolderAvailableResponse)(base.EndInvoke("IsFolderAvailable", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginCreateFolderUnderParent(SLFileBrowser.FileSystemService.CreateFolderUnderParentRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("CreateFolderUnderParent", _args, callback, asyncState);
                return _result;
            }
            
            public SLFileBrowser.FileSystemService.CreateFolderUnderParentResponse EndCreateFolderUnderParent(System.IAsyncResult result) {
                object[] _args = new object[0];
                SLFileBrowser.FileSystemService.CreateFolderUnderParentResponse _result = ((SLFileBrowser.FileSystemService.CreateFolderUnderParentResponse)(base.EndInvoke("CreateFolderUnderParent", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginCreateFolder(SLFileBrowser.FileSystemService.CreateFolderRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("CreateFolder", _args, callback, asyncState);
                return _result;
            }
            
            public SLFileBrowser.FileSystemService.CreateFolderResponse EndCreateFolder(System.IAsyncResult result) {
                object[] _args = new object[0];
                SLFileBrowser.FileSystemService.CreateFolderResponse _result = ((SLFileBrowser.FileSystemService.CreateFolderResponse)(base.EndInvoke("CreateFolder", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginCreateFolderUnderParentItem(SLFileBrowser.FileSystemService.CreateFolderUnderParentItemRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("CreateFolderUnderParentItem", _args, callback, asyncState);
                return _result;
            }
            
            public SLFileBrowser.FileSystemService.CreateFolderUnderParentItemResponse EndCreateFolderUnderParentItem(System.IAsyncResult result) {
                object[] _args = new object[0];
                SLFileBrowser.FileSystemService.CreateFolderUnderParentItemResponse _result = ((SLFileBrowser.FileSystemService.CreateFolderUnderParentItemResponse)(base.EndInvoke("CreateFolderUnderParentItem", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteFolder(SLFileBrowser.FileSystemService.DeleteFolderRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("DeleteFolder", _args, callback, asyncState);
                return _result;
            }
            
            public SLFileBrowser.FileSystemService.DeleteFolderResponse EndDeleteFolder(System.IAsyncResult result) {
                object[] _args = new object[0];
                SLFileBrowser.FileSystemService.DeleteFolderResponse _result = ((SLFileBrowser.FileSystemService.DeleteFolderResponse)(base.EndInvoke("DeleteFolder", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteFile(SLFileBrowser.FileSystemService.DeleteFileRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("DeleteFile", _args, callback, asyncState);
                return _result;
            }
            
            public SLFileBrowser.FileSystemService.DeleteFileResponse EndDeleteFile(System.IAsyncResult result) {
                object[] _args = new object[0];
                SLFileBrowser.FileSystemService.DeleteFileResponse _result = ((SLFileBrowser.FileSystemService.DeleteFileResponse)(base.EndInvoke("DeleteFile", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginMoveFolder(SLFileBrowser.FileSystemService.MoveFolderRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("MoveFolder", _args, callback, asyncState);
                return _result;
            }
            
            public SLFileBrowser.FileSystemService.MoveFolderResponse EndMoveFolder(System.IAsyncResult result) {
                object[] _args = new object[0];
                SLFileBrowser.FileSystemService.MoveFolderResponse _result = ((SLFileBrowser.FileSystemService.MoveFolderResponse)(base.EndInvoke("MoveFolder", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginMoveFolderItem(SLFileBrowser.FileSystemService.MoveFolderItemRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("MoveFolderItem", _args, callback, asyncState);
                return _result;
            }
            
            public SLFileBrowser.FileSystemService.MoveFolderItemResponse EndMoveFolderItem(System.IAsyncResult result) {
                object[] _args = new object[0];
                SLFileBrowser.FileSystemService.MoveFolderItemResponse _result = ((SLFileBrowser.FileSystemService.MoveFolderItemResponse)(base.EndInvoke("MoveFolderItem", _args, result)));
                return _result;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://vfs.hardcodet.net/ws/", ConfigurationName="FileSystemService.IFSWriterService")]
    public interface IFSWriterService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://vfs.hardcodet.net/ws/IFSWriterService/WriteFile", ReplyAction="http://vfs.hardcodet.net/ws/IFSWriterService/WriteFileResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SLFileBrowser.FileSystemService.ResourceFault), Action="http://vfs.hardcodet.net/ws/IFSWriterService/WriteFileResourceFaultFault", Name="ResourceFault", Namespace="http://schemas.datacontract.org/2004/07/Vfs.FileSystemService.Faults")]
        System.IAsyncResult BeginWriteFile(SLFileBrowser.FileSystemService.WriteFileDataContract request, System.AsyncCallback callback, object asyncState);
        
        SLFileBrowser.FileSystemService.FileInfoDataContract EndWriteFile(System.IAsyncResult result);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="WriteFileDataContract", WrapperNamespace="http://vfs.hardcodet.net/ws/", IsWrapped=true)]
    public partial class WriteFileDataContract {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://vfs.hardcodet.net/ws/", Order=0)]
        public byte[] Data;
        
        public WriteFileDataContract() {
        }
        
        public WriteFileDataContract(byte[] Data) {
            this.Data = Data;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="FileInfoDataContract", WrapperNamespace="http://vfs.hardcodet.net/ws/", IsWrapped=true)]
    public partial class FileInfoDataContract {
        
        public FileInfoDataContract() {
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFSWriterServiceChannel : SLFileBrowser.FileSystemService.IFSWriterService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WriteFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public WriteFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SLFileBrowser.FileSystemService.FileInfoDataContract Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SLFileBrowser.FileSystemService.FileInfoDataContract)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FSWriterServiceClient : System.ServiceModel.ClientBase<SLFileBrowser.FileSystemService.IFSWriterService>, SLFileBrowser.FileSystemService.IFSWriterService {
        
        private BeginOperationDelegate onBeginWriteFileDelegate;
        
        private EndOperationDelegate onEndWriteFileDelegate;
        
        private System.Threading.SendOrPostCallback onWriteFileCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public FSWriterServiceClient() {
        }
        
        public FSWriterServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FSWriterServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FSWriterServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FSWriterServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<WriteFileCompletedEventArgs> WriteFileCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SLFileBrowser.FileSystemService.IFSWriterService.BeginWriteFile(SLFileBrowser.FileSystemService.WriteFileDataContract request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginWriteFile(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SLFileBrowser.FileSystemService.FileInfoDataContract SLFileBrowser.FileSystemService.IFSWriterService.EndWriteFile(System.IAsyncResult result) {
            return base.Channel.EndWriteFile(result);
        }
        
        private System.IAsyncResult OnBeginWriteFile(object[] inValues, System.AsyncCallback callback, object asyncState) {
            SLFileBrowser.FileSystemService.WriteFileDataContract request = ((SLFileBrowser.FileSystemService.WriteFileDataContract)(inValues[0]));
            return ((SLFileBrowser.FileSystemService.IFSWriterService)(this)).BeginWriteFile(request, callback, asyncState);
        }
        
        private object[] OnEndWriteFile(System.IAsyncResult result) {
            SLFileBrowser.FileSystemService.FileInfoDataContract retVal = ((SLFileBrowser.FileSystemService.IFSWriterService)(this)).EndWriteFile(result);
            return new object[] {
                    retVal};
        }
        
        private void OnWriteFileCompleted(object state) {
            if ((this.WriteFileCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.WriteFileCompleted(this, new WriteFileCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void WriteFileAsync(SLFileBrowser.FileSystemService.WriteFileDataContract request) {
            this.WriteFileAsync(request, null);
        }
        
        public void WriteFileAsync(SLFileBrowser.FileSystemService.WriteFileDataContract request, object userState) {
            if ((this.onBeginWriteFileDelegate == null)) {
                this.onBeginWriteFileDelegate = new BeginOperationDelegate(this.OnBeginWriteFile);
            }
            if ((this.onEndWriteFileDelegate == null)) {
                this.onEndWriteFileDelegate = new EndOperationDelegate(this.OnEndWriteFile);
            }
            if ((this.onWriteFileCompletedDelegate == null)) {
                this.onWriteFileCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnWriteFileCompleted);
            }
            base.InvokeAsync(this.onBeginWriteFileDelegate, new object[] {
                        request}, this.onEndWriteFileDelegate, this.onWriteFileCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override SLFileBrowser.FileSystemService.IFSWriterService CreateChannel() {
            return new FSWriterServiceClientChannel(this);
        }
        
        private class FSWriterServiceClientChannel : ChannelBase<SLFileBrowser.FileSystemService.IFSWriterService>, SLFileBrowser.FileSystemService.IFSWriterService {
            
            public FSWriterServiceClientChannel(System.ServiceModel.ClientBase<SLFileBrowser.FileSystemService.IFSWriterService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginWriteFile(SLFileBrowser.FileSystemService.WriteFileDataContract request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("WriteFile", _args, callback, asyncState);
                return _result;
            }
            
            public SLFileBrowser.FileSystemService.FileInfoDataContract EndWriteFile(System.IAsyncResult result) {
                object[] _args = new object[0];
                SLFileBrowser.FileSystemService.FileInfoDataContract _result = ((SLFileBrowser.FileSystemService.FileInfoDataContract)(base.EndInvoke("WriteFile", _args, result)));
                return _result;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://vfs.hardcodet.net/ws/", ConfigurationName="FileSystemService.IFSReaderService")]
    public interface IFSReaderService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://vfs.hardcodet.net/ws/IFSReaderService/ReadFileContents", ReplyAction="http://vfs.hardcodet.net/ws/IFSReaderService/ReadFileContentsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SLFileBrowser.FileSystemService.ResourceFault), Action="http://vfs.hardcodet.net/ws/IFSReaderService/ReadFileContentsResourceFaultFault", Name="ResourceFault", Namespace="http://schemas.datacontract.org/2004/07/Vfs.FileSystemService.Faults")]
        System.IAsyncResult BeginReadFileContents(SLFileBrowser.FileSystemService.ReadFileContentsRequest request, System.AsyncCallback callback, object asyncState);
        
        SLFileBrowser.FileSystemService.ReadFileContentsResponse EndReadFileContents(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://vfs.hardcodet.net/ws/IFSReaderService/ReadFileContents2", ReplyAction="http://vfs.hardcodet.net/ws/IFSReaderService/ReadFileContents2Response")]
        [System.ServiceModel.FaultContractAttribute(typeof(SLFileBrowser.FileSystemService.ResourceFault), Action="http://vfs.hardcodet.net/ws/IFSReaderService/ReadFileContents2ResourceFaultFault", Name="ResourceFault", Namespace="http://schemas.datacontract.org/2004/07/Vfs.FileSystemService.Faults")]
        System.IAsyncResult BeginReadFileContents2(SLFileBrowser.FileSystemService.ReadFileContents2Request request, System.AsyncCallback callback, object asyncState);
        
        SLFileBrowser.FileSystemService.ReadFileContents2Response EndReadFileContents2(System.IAsyncResult result);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ReadFileContents", WrapperNamespace="http://vfs.hardcodet.net/ws/", IsWrapped=true)]
    public partial class ReadFileContentsRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://vfs.hardcodet.net/ws/", Order=0)]
        public string virtualFilePath;
        
        public ReadFileContentsRequest() {
        }
        
        public ReadFileContentsRequest(string virtualFilePath) {
            this.virtualFilePath = virtualFilePath;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ReadFileContentsResponse", WrapperNamespace="http://vfs.hardcodet.net/ws/", IsWrapped=true)]
    public partial class ReadFileContentsResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://vfs.hardcodet.net/ws/", Order=0)]
        public byte[] ReadFileContentsResult;
        
        public ReadFileContentsResponse() {
        }
        
        public ReadFileContentsResponse(byte[] ReadFileContentsResult) {
            this.ReadFileContentsResult = ReadFileContentsResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ReadFileContents2", WrapperNamespace="http://vfs.hardcodet.net/ws/", IsWrapped=true)]
    public partial class ReadFileContents2Request {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://vfs.hardcodet.net/ws/", Order=0)]
        public SLFileBrowser.FileSystemService.VirtualFileInfo fileInfo;
        
        public ReadFileContents2Request() {
        }
        
        public ReadFileContents2Request(SLFileBrowser.FileSystemService.VirtualFileInfo fileInfo) {
            this.fileInfo = fileInfo;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ReadFileContents2Response", WrapperNamespace="http://vfs.hardcodet.net/ws/", IsWrapped=true)]
    public partial class ReadFileContents2Response {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://vfs.hardcodet.net/ws/", Order=0)]
        public byte[] ReadFileContents2Result;
        
        public ReadFileContents2Response() {
        }
        
        public ReadFileContents2Response(byte[] ReadFileContents2Result) {
            this.ReadFileContents2Result = ReadFileContents2Result;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFSReaderServiceChannel : SLFileBrowser.FileSystemService.IFSReaderService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ReadFileContentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ReadFileContentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SLFileBrowser.FileSystemService.ReadFileContentsResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SLFileBrowser.FileSystemService.ReadFileContentsResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ReadFileContents2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ReadFileContents2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SLFileBrowser.FileSystemService.ReadFileContents2Response Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SLFileBrowser.FileSystemService.ReadFileContents2Response)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FSReaderServiceClient : System.ServiceModel.ClientBase<SLFileBrowser.FileSystemService.IFSReaderService>, SLFileBrowser.FileSystemService.IFSReaderService {
        
        private BeginOperationDelegate onBeginReadFileContentsDelegate;
        
        private EndOperationDelegate onEndReadFileContentsDelegate;
        
        private System.Threading.SendOrPostCallback onReadFileContentsCompletedDelegate;
        
        private BeginOperationDelegate onBeginReadFileContents2Delegate;
        
        private EndOperationDelegate onEndReadFileContents2Delegate;
        
        private System.Threading.SendOrPostCallback onReadFileContents2CompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public FSReaderServiceClient() {
        }
        
        public FSReaderServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FSReaderServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FSReaderServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FSReaderServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<ReadFileContentsCompletedEventArgs> ReadFileContentsCompleted;
        
        public event System.EventHandler<ReadFileContents2CompletedEventArgs> ReadFileContents2Completed;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SLFileBrowser.FileSystemService.IFSReaderService.BeginReadFileContents(SLFileBrowser.FileSystemService.ReadFileContentsRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginReadFileContents(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SLFileBrowser.FileSystemService.ReadFileContentsResponse SLFileBrowser.FileSystemService.IFSReaderService.EndReadFileContents(System.IAsyncResult result) {
            return base.Channel.EndReadFileContents(result);
        }
        
        private System.IAsyncResult OnBeginReadFileContents(object[] inValues, System.AsyncCallback callback, object asyncState) {
            SLFileBrowser.FileSystemService.ReadFileContentsRequest request = ((SLFileBrowser.FileSystemService.ReadFileContentsRequest)(inValues[0]));
            return ((SLFileBrowser.FileSystemService.IFSReaderService)(this)).BeginReadFileContents(request, callback, asyncState);
        }
        
        private object[] OnEndReadFileContents(System.IAsyncResult result) {
            SLFileBrowser.FileSystemService.ReadFileContentsResponse retVal = ((SLFileBrowser.FileSystemService.IFSReaderService)(this)).EndReadFileContents(result);
            return new object[] {
                    retVal};
        }
        
        private void OnReadFileContentsCompleted(object state) {
            if ((this.ReadFileContentsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ReadFileContentsCompleted(this, new ReadFileContentsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ReadFileContentsAsync(SLFileBrowser.FileSystemService.ReadFileContentsRequest request) {
            this.ReadFileContentsAsync(request, null);
        }
        
        public void ReadFileContentsAsync(SLFileBrowser.FileSystemService.ReadFileContentsRequest request, object userState) {
            if ((this.onBeginReadFileContentsDelegate == null)) {
                this.onBeginReadFileContentsDelegate = new BeginOperationDelegate(this.OnBeginReadFileContents);
            }
            if ((this.onEndReadFileContentsDelegate == null)) {
                this.onEndReadFileContentsDelegate = new EndOperationDelegate(this.OnEndReadFileContents);
            }
            if ((this.onReadFileContentsCompletedDelegate == null)) {
                this.onReadFileContentsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnReadFileContentsCompleted);
            }
            base.InvokeAsync(this.onBeginReadFileContentsDelegate, new object[] {
                        request}, this.onEndReadFileContentsDelegate, this.onReadFileContentsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SLFileBrowser.FileSystemService.IFSReaderService.BeginReadFileContents2(SLFileBrowser.FileSystemService.ReadFileContents2Request request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginReadFileContents2(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SLFileBrowser.FileSystemService.ReadFileContents2Response SLFileBrowser.FileSystemService.IFSReaderService.EndReadFileContents2(System.IAsyncResult result) {
            return base.Channel.EndReadFileContents2(result);
        }
        
        private System.IAsyncResult OnBeginReadFileContents2(object[] inValues, System.AsyncCallback callback, object asyncState) {
            SLFileBrowser.FileSystemService.ReadFileContents2Request request = ((SLFileBrowser.FileSystemService.ReadFileContents2Request)(inValues[0]));
            return ((SLFileBrowser.FileSystemService.IFSReaderService)(this)).BeginReadFileContents2(request, callback, asyncState);
        }
        
        private object[] OnEndReadFileContents2(System.IAsyncResult result) {
            SLFileBrowser.FileSystemService.ReadFileContents2Response retVal = ((SLFileBrowser.FileSystemService.IFSReaderService)(this)).EndReadFileContents2(result);
            return new object[] {
                    retVal};
        }
        
        private void OnReadFileContents2Completed(object state) {
            if ((this.ReadFileContents2Completed != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ReadFileContents2Completed(this, new ReadFileContents2CompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ReadFileContents2Async(SLFileBrowser.FileSystemService.ReadFileContents2Request request) {
            this.ReadFileContents2Async(request, null);
        }
        
        public void ReadFileContents2Async(SLFileBrowser.FileSystemService.ReadFileContents2Request request, object userState) {
            if ((this.onBeginReadFileContents2Delegate == null)) {
                this.onBeginReadFileContents2Delegate = new BeginOperationDelegate(this.OnBeginReadFileContents2);
            }
            if ((this.onEndReadFileContents2Delegate == null)) {
                this.onEndReadFileContents2Delegate = new EndOperationDelegate(this.OnEndReadFileContents2);
            }
            if ((this.onReadFileContents2CompletedDelegate == null)) {
                this.onReadFileContents2CompletedDelegate = new System.Threading.SendOrPostCallback(this.OnReadFileContents2Completed);
            }
            base.InvokeAsync(this.onBeginReadFileContents2Delegate, new object[] {
                        request}, this.onEndReadFileContents2Delegate, this.onReadFileContents2CompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override SLFileBrowser.FileSystemService.IFSReaderService CreateChannel() {
            return new FSReaderServiceClientChannel(this);
        }
        
        private class FSReaderServiceClientChannel : ChannelBase<SLFileBrowser.FileSystemService.IFSReaderService>, SLFileBrowser.FileSystemService.IFSReaderService {
            
            public FSReaderServiceClientChannel(System.ServiceModel.ClientBase<SLFileBrowser.FileSystemService.IFSReaderService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginReadFileContents(SLFileBrowser.FileSystemService.ReadFileContentsRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("ReadFileContents", _args, callback, asyncState);
                return _result;
            }
            
            public SLFileBrowser.FileSystemService.ReadFileContentsResponse EndReadFileContents(System.IAsyncResult result) {
                object[] _args = new object[0];
                SLFileBrowser.FileSystemService.ReadFileContentsResponse _result = ((SLFileBrowser.FileSystemService.ReadFileContentsResponse)(base.EndInvoke("ReadFileContents", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginReadFileContents2(SLFileBrowser.FileSystemService.ReadFileContents2Request request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("ReadFileContents2", _args, callback, asyncState);
                return _result;
            }
            
            public SLFileBrowser.FileSystemService.ReadFileContents2Response EndReadFileContents2(System.IAsyncResult result) {
                object[] _args = new object[0];
                SLFileBrowser.FileSystemService.ReadFileContents2Response _result = ((SLFileBrowser.FileSystemService.ReadFileContents2Response)(base.EndInvoke("ReadFileContents2", _args, result)));
                return _result;
            }
        }
    }
}
